@model ServiceTRAX.Models.ViewModels.AspNetUsersMgmtViewModel
@using ServiceTRAX.Identity

@{
    ViewData["Title"] = "User Management";
}

@section StyleSheets {

    <link rel="stylesheet" href="~/css/mygrid.1.0.css">

    <style>
        .gridContent {
            position: absolute;
            border: solid 1px #c0c0c0;
            left: 20px;
            top: 180px;
            right: 20px;
            bottom: 30px;
        }


        .chip {
            display: flex;
            margin: 3px;
            border-radius: 5px;
            background-color: #ffffff;
            color: #0f2852;
            padding: 3px 5px 3px 10px;
        }

        .closebtn {
            padding-left: 10px;
            color: #888;
            font-weight: bold;
            float: right;
            font-size: 20px;
            cursor: pointer;
        }

            .closebtn:hover {
                color: #000;
            }

        /*        .bootstrap-select .filter-option {
                    white-space: normal;
                }
        */
        /* .bootstrap-select .filter-option {
                    white-space: pre-line !important;
                }

                rule_container .bootstrap-select {
                    display: block !important;
                }*/
    </style>
}

@section Scripts {


    <script language="javascript" type="text/javascript" src="~/lib/mygrid.1.0.js"></script>
    <script type='text/javascript' src='~/lib/knockout/knockout-latest.js'></script>
    <script type='text/javascript' src='~/lib/knockout.validation/knockout.validation.min.js'></script>
    <script type='text/javascript' src='~/js/ko-bindingHandlers.js'></script>
    <script type='text/javascript' src='~/override/main-custom.js'></script>
    <script type='text/javascript' src='~/js/notification-dialog.js'></script>
    <script language="javascript" type="text/javascript" src="~/lib/server.js" asp-append-version="true"></script>

    <script type="text/javascript">

        var gridName = 'AspNetUsers';
        var oGrid = null;


        $(function () {

            let model =  @Html.Raw(Json.Serialize(Model));
            console.log(model);

            ko.validation.rules['hasOrganizationSet'] = {
                validator: function (val, params) {
                    return val && val.organization() !== null;
                },
                message: function (params) {
                    return params.message;
                }
            };
            ko.validation.registerExtenders();

            model.confirmPasswordResetDialog = notificationDialog;
            model.callPasswordReset = function (userid) {
                postWrapper('/account/resetuserpassword', ko.toJSON({ 'UserID': userid }))
                    .then((r) => model.confirmPasswordResetDialog.displayDialog(r.value.succeded ? 'Reset Completed' : 'Reset Failure', r.value.outcomeDescription));
            };

            let userGridEvents = {
                buttonClick: function (btn, row) {
                    if (btn.id === 'cmdUserPasswordReset') {
                        model.confirmPasswordResetDialog.displayConfirmationDialog('Password Reset', `Click ACCEPT to Reset the Password for ${row.FIRSTNAME} ${row.LASTNAME} (${row.USERNAME})`, () => model.callPasswordReset(row.USERID));
                    }
                    if (btn.id === 'cmdUserCustomers') {
                        model.assignUserCustomersDialog.displayDialog(row.USERID);
                    }
                }
            };

            let userGridParameters = function () {
                return { ORGANIZATION_ID: @Model.OrganizationID, RUNNING_AS_USERID: @User.GetUserID() }
            };

            let oGrid = new clsMyGrid(gridName, document.getElementById('usersTEG'), null, userGridEvents, true, userGridParameters());




            model.notificationDialog = notificationDialog;

            model.newUserDialog = {
                isDialogDisplaying: ko.observable(false),
                username: ko.observable('').extend({ required: { message: 'Please enter a username.' } }),
                email: ko.observable('').extend({ required: true, email: true }),
                firstname: ko.observable('').extend({ required: { message: 'Please enter users\'s first name.' } }),
                middlename: ko.observable(''),
                lastname: ko.observable('').extend({ required: { message: 'Please enter user\'s last name.' } }),
                selectedContactType: ko.observable(null).extend({ required: { message: 'Please select User Contact Type.' } }),
                isServiceTRAX: ko.observable(true),
                isStatusTRAX: ko.observable(false),
                isLSPUserSelected: ko.observable(false),
                isPrimaryContact: ko.observable(false),
                system: ko.observable('').extend({ required: { message: 'Please select a system.' } }),
                selectedRoles: ko.observableArray([]).extend({ required: { message: 'Please select at least one role.' } }),
                selectedLSPUsers: ko.observableArray([]),
                lspUsers: ko.observableArray(model.lspUsers),


                defaultUserOrgCustomerValue: ko.observable(null).extend({ hasOrganizationSet: { message: 'Please enter a Default User\'s Organization' } }),

                availableOrgs: function (currentOrg) {
                    return ko.computed(function () {

                        if (model.newUserDialog && model.newUserDialog.defaultUserOrgCustomerValue()) {
                            let selectedOrgs = model.newUserDialog.orgCustomers().map(o => o.organization());
                            selectedOrgs.push(model.newUserDialog.defaultUserOrgCustomerValue().organization());
                            // Include current organization in the output becase the Dropdown needs it to display the name
                            let orgs = model.organizations.filter(o => !selectedOrgs.includes(o.organizationId) || o.organizationId === currentOrg());
                            return orgs;
                        }
                        return model.organizations;
                    });
                },

                orgCustomers: ko.observableArray([]),
                wizardPage: ko.observable('user'),
                runningUserCreation: ko.observable(false),

                validationGroupUserDetails: function () {
                    //return ko.validation.group(this, { deep: true }
                    if (this.isServiceTRAX()){
                        if (!this.isLSPUserSelected) {
                        return ko.validation.group({
                            f1: this.username,
                            f2: this.email,
                            f3: this.firstname,
                            f4: this.lastname,
                            f5: this.selectedContactType,
                            f6: this.selectedRoles,
                            f7: this.system
                         }, { deep: true })
                        }
                        else {
                            return ko.validation.group({
                                f1: this.username,
                                f2: this.email,
                                f3: this.firstname,
                                f4: this.lastname,
                                f5: this.selectedContactType,
                                f7: this.system
                            }, { deep: true })
                        }


                    }
                    else {
                        return ko.validation.group({
                            f1: this.username,
                            f2: this.email,
                            f3: this.firstname,
                            f4: this.lastname,
                            f5: this.system
                        }, { deep: true })
                   }
                },
                validationGroupUserOrganizations: function () {
                    return ko.validation.group({
                        o1: this.defaultUserOrgCustomerValue
                    }) //, { deep: true })
                },

                displayDialog: function () {

                    this.username('');
                    this.email('');
                    this.firstname('');
                    this.middlename('');
                    this.lastname('');
                    this.selectedRoles([]);
                    this.selectedLSPUsers([]);
                    this.selectedContactType(model.contactTypes[0].code);
                    this.orgCustomers([]);
                    this.wizardPage('user');
                    this.isServiceTRAX(true);
                    this.isStatusTRAX(false);
                    this.isLSPUserSelected(false);
                    this.isPrimaryContact(false);
                    this.runningUserCreation(false);
                    //this.defaultUserOrgCustomerValue(null);
                    this.validationGroupUserDetails().showAllMessages(false);

                    this.defaultUserOrgCustomerValue(this.createUserOrgCustomerObj());
                    this.validationGroupUserOrganizations().showAllMessages(false);

                    this.isDialogDisplaying(true);
                },
                closeDialog: function () {
                    this.isDialogDisplaying(false);
                },
                goToUsersPage: function () {
                    this.wizardPage('user');
                },
                goToResourcesPage: function () {
                    var result = this.validationGroupUserOrganizations();
                    if (result().length > 0) {
                        result.showAllMessages(true);
                        console.log(result);
                        return false;
                    }

                    result.showAllMessages(false);
                    this.wizardPage('resources');
                },
                goToLSPPage: function() {
                    this.wizardPage('lsp');
                },
                goToSummary: function () {
                    this.wizardPage('summary');
                },
                dialogSubHeader: ko.pureComputed(function () {
                    if (model.newUserDialog.wizardPage() === 'user') {
                        return 'USER DETAILS';
                    } else if (model.newUserDialog.wizardPage() === 'locations') {
                        return 'USER LOCATIONS AND CUSTOMERS';
                    } else if (model.newUserDialog.wizardPage() === 'resources') {
                        return 'USER RESOURCES';
                    } else if (model.newUserDialog.wizardPage() === 'summary') {
                        return 'USER SUMMARY';
                    } else if (model.newUserDialog.wizardPage() === 'lsp') {
                        return 'LOCAL SERVICE PROVIDER';
                    } else {
                        return '.....';
                    }
                }),
                goToLocationsPage: function () {
                   if (this.isServiceTRAX() || this.isStatusTRAX())
                        this.system('hasValue');
                    else
                        this.system('');

                    
                    var result = this.validationGroupUserDetails();
                    if (result().length > 0) {
                        result.showAllMessages(true);
                        console.log(result);
                        return false;
                    }

                    result.showAllMessages(false);
                    this.wizardPage('locations');
                },
                createUser: function () {
                    this.runningUserCreation(true);
                    //if (this.isServiceTRAX()) {
                    //console.log(this.selectedLSPUsers());
                    //console.log(this.selectedRoles());
                    //this.selectedLSPUsers()
                        let userInfo = {
                        username: this.username(),
                        email: this.email(),
                        firstName: this.firstname(),
                        middleName: this.middlename(),
                        lastName: this.lastname(),
                        roles: this.selectedRoles(),
                        organizations: [this.defaultUserOrgCustomerValue().organization(), ...this.orgCustomers().map(o => o.organization())],
                        customers: [...this.defaultUserOrgCustomerValue().selectedCustomers(), ...this.orgCustomers().map(o => o.selectedCustomers())].flat(),
                        defaultUserOrganization: this.defaultUserOrgCustomerValue().organization(),
                        contactType: this.selectedContactType(),

                        statusTRAX: this.isStatusTRAX,
                        servicetrax: this.isServiceTRAX(),
                        lspUser: this.isLSPUserSelected(),
                        isPrimaryContact: this.isPrimaryContact(),
                        primaryContact: this.isPrimaryContact(),
                        resourcesToCreate: this.calculateResourcesToCreate(),
                        lspUsersSelected: this.selectedLSPUsers()

                
                        };

                        postWrapper('/registernewuser', ko.toJSON(userInfo))
                        .then((r) => {
                            if (r && r.success === true) {
                                model.notificationDialog.displayDialog('User Created!', r.message);
                            } else {
                                model.notificationDialog.displayDialog('User Creation Failure', r.errors);
                            }
                        })
                        .then(() => this.closeDialog())
                        .finally(() => this.runningUserCreation(false));
                    },

                createUserOrgCustomerObj: function () {
                    let orgLine = {
                        organization: ko.observable(null),
                        customers: ko.observableArray([]),
                        selectedCustomers: ko.observableArray([]),
                        roleid: ko.observable(null),
                        createResource: ko.observable(false)
                    };

                    orgLine.organization.subscribe(function (newSelectedOrg) {
                        getWrapper('/api/v1/organizationcustomers', { 'OrganizationID': newSelectedOrg })
                            .then(r => this.customers(r.value));
                    }.bind(orgLine));



                    return orgLine;
                },

                defaultUserOrgCustomer: function () {
                    if (this.defaultUserOrgCustomerValue()) {
                        return this.defaultUserOrgCustomerValue();
                    } else {
                        this.defaultUserOrgCustomerValue(this.createUserOrgCustomerObj());
                        return this.defaultUserOrgCustomerValue();
                    }
                },
                addOrgCustomer: function () {
                    this.orgCustomers.push(this.createUserOrgCustomerObj());
                },
                removeOrgCustomer: function (index) {
                    this.orgCustomers.splice(index, 1);
                },
                calculateResourcesToCreate: function () {
                    let resourcesToCreate = [];
                    if (this.defaultUserOrgCustomer().createResource()) {
                        resourcesToCreate.push({ 'organizationId': this.defaultUserOrgCustomer().organization(), 'roleid': this.defaultUserOrgCustomer().roleid() })
                    }

                    let pp = this.orgCustomers().filter(o => o.organization() !== null && o.createResource() === true).map(r => ({ 'organizationId': r.organization(), 'roleid': r.roleid() }));
                    resourcesToCreate = [...resourcesToCreate, ...pp];

                    return resourcesToCreate;
                },

                showRoles:function(value, control) {
                    if (control =='serviceTRAX')
                        this.isServiceTRAX(!this.isServiceTRAX());
                    if (control =='statusTRAX')
                        this.isStatusTRAX(!this.isStatusTRAX());
                   
                },
                changeLSPUserSelected: function () {
                    this.isLSPUserSelected(!this.isLSPUserSelected());
                    if (this.isLSPUserSelected()){
                        this.selectedContactType("LSP");
                    }
                },
                changePrimaryContactSelected: function () {
                    this.isPrimaryContact(!this.isPrimaryContact());
                },
                isLSPUserDialogDisplaying: ko.observable(false),
                newLSPUser: {
                    lspName: ko.observable('').extend({ required: { message: 'Please give a name to the LSP User.' } }),

                    address1: ko.observable(''),
                    address2: ko.observable(''),
                    city: ko.observable(''),
                    state: ko.observable(''),
                    zip: ko.observable('')
                },


                closeLSPUserDialog: function () {
                    this.isLSPUserDialogDisplaying(false);
                },

                displayLSPUserDialog: function () {
                    this.newLSPUser.lspName('');
                    this.newLSPUser.address1('');
                    this.newLSPUser.address2('');
                    this.newLSPUser.city('');
                    this.newLSPUser.state('');
                    this.newLSPUser.zip('');
                    this.isLSPUserDialogDisplaying(true);
                },
                upsertLSPUser: function () {
                    console.log(ko.toJSON(this.newLSPUser));
                    postWrapper('/api/v1/addlspuser', ko.toJSON(this.newLSPUser))

                        .then(function({ value }) {
                            if (value.succeeded === true) {
                                model.newUserDialog.isLSPUserDialogDisplaying(false);
                                model.newUserDialog.lspUsers.push({ lspId:value.value, lspName:model.newUserDialog.newLSPUser.lspName});
                                model.newUserDialog.selectedLSPUsers.push(value.value);
                            }
                            else {
                                alert('Local Service Provider Insert failed!');
                            }
                        }.bind(model));
                        
                }

            }
            //
            // User Customers Dialog
            //
            model.assignUserCustomersDialog = {
                isDialogDisplaying: ko.observable(false),
                customers: ko.observableArray([]),
                selectedCustomers: ko.observableArray([]),
                userID: null,
                displayDialog: function (UserID) {
                    this.userID = UserID;
                    getWrapper('/api/v1/customersforuser', { UserID: this.userID })
                        .then(r => {
                            this.customers(r.value);
                            this.selectedCustomers(r.value.filter(c => c.assigned === true).map(c => c.customer_id));
                            console.log(this.customers(), this.selectedCustomers());
                            this.isDialogDisplaying(true);
                        });
                },
                closeDialog: function () {
                    this.isDialogDisplaying(false);
                },
                selectedCustomersObjects: ko.pureComputed(function () {
                    let selected = model.assignUserCustomersDialog.customers().filter(c => model.assignUserCustomersDialog.selectedCustomers().includes(c.customer_id));
                    return selected.sort((a, b) => a.customer_name.trim().toLowerCase() < b.customer_name.trim().toLowerCase());
                }),
                removeCustomer: function (customerid) {
                    this.apiCustomerUpdate(customerid, true)
                        .then((response) => {
                            if (response.succeeded) {
                                this.selectedCustomers.remove(c => c === customerid);
                                $('#custSelection').selectpicker('refresh');
                            }
                        });
                },
                removeCustomerByIndex: function (index) {
                    let customerObj = this.customers()[index];
                    let customerid = customerObj.customer_id;
                    this.apiCustomerUpdate(customerid, true)
                        .then((response) => {
                            if (response.succeeded) {
                                this.selectedCustomers.remove(c => c === customerid);
                                $('#custSelection').selectpicker('refresh');
                            }
                        });
                },
                addCustomer: function (index) {
                    let customerObj = this.customers()[index];
                    this.apiCustomerUpdate(customerObj.customer_id, false)
                        .then((response) => {
                            if (response.succeeded) {
                                $('#custSelection').selectpicker('refresh');
                            }
                        });
                },
                apiCustomerUpdate: function (customerid, istoremove) {
                    return postWrapper('/api/v1/customersforuser', ko.toJSON({ 'userid': this.userID, 'customerid': customerid, 'istoremove': istoremove }));
                }
            }


            $('#custSelection').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
                console.log('pv: ', previousValue, clickedIndex, isSelected);
                if (isSelected) {
                    model.assignUserCustomersDialog.addCustomer(clickedIndex);
                } else {                    
                    model.assignUserCustomersDialog.removeCustomerByIndex(clickedIndex);
                
                }
            });


            //
            // Validations
            //
            ko.validation.init({
                errorElementClass: 'text-danger',
                errorMessageClass: 'help-block',
                decorateElement: true,
                insertMessages: false
            });

            //
            //
            //
            ko.bindingHandlers.selectPicker = ServiceTRAXBindingHandlers.selectPicker;
            ko.bindingHandlers.showModal = ServiceTRAXBindingHandlers.showModal;
            ko.applyBindings(model);

        });

    </script>

}
<div class="d-flex flex-row align-items-center mt-2">
    <h2>USER MANAGEMENT</h2>
    <button class="btn btn-primary ml-auto" data-bind="click:() => newUserDialog.displayDialog()">
        <em class="fas fa-user-plus"></em> NEW USER
    </button>
</div>
<div id="content-wrap">
    <div class="gridContent" id="usersTEG"></div>
</div>


<!-- ko with:newUserDialog-->
<div class="modal fade modal--forms" id="NewUserModal" data-bind="showModal:isDialogDisplaying"
     tabindex="-1" data-backdrop="static" role="dialog" aria-labelledby="NewUserModal" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content modal-content--dark-blue">
            <div class="modal-header">
                <h5 class="modal-title mr-auto ucase"><em class="fas fa-user-plus mr-2"></em> NEW USER - <span data-bind="text:dialogSubHeader"></span></h5>
                <button type="button" class="btn icon-only" data-bind="click:closeDialog">
                    <em class="fas fa-times"></em>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <!-- ko if:wizardPage()==='user' -->
                    <div class="form-row mb-3">
                        <div class="col-4">
                            <label for="username">
                                Username
                            </label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="username" data-bind="value:username" autocomplete="off" />
                                <div class="help-block invalid-feedback" data-bind="validationMessage: username"></div>
                            </div>
                        </div>
                        <div class="col-8">
                            <label for="email">
                                Email
                            </label>
                            <div class="input-group">
                                <input type="email" class="form-control" id="email" data-bind="value:email" autocomplete="off" />
                                <div class="help-block invalid-feedback" data-bind="validationMessage: email"></div>
                            </div>
                        </div>
                    </div>
                    <div class="form-row mb-3">
                        <div class="col-4">
                            <label for="firstname">
                                First Name
                            </label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="firstname" data-bind="value:firstname" autocomplete="off" />
                                <div class="help-block invalid-feedback" data-bind="validationMessage: firstname"></div>
                            </div>
                        </div>
                        <div class="col-4">
                            <label for="middlename">
                                Middle Name
                            </label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="middlename" data-bind="value:middlename" autocomplete="off" />
                            </div>
                        </div>
                        <div class="col-4">
                            <label for="lastname">
                                Last Name
                            </label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="lastname" data-bind="value:lastname" autocomplete="off" />
                                <div class="help-block invalid-feedback" data-bind="validationMessage: lastname"></div>
                            </div>
                        </div>
                    </div>
                    <div class="form-row mb-3">
                        <div class="col-4">
                            <label for="systemCheck">
                                Systems
                            </label>
                            <div class="input-group">
                                <input type="checkbox" id="serviceTRAX" data-bind="click:showRoles($data.isServiceTRAX(),'serviceTRAX'), checked: isServiceTRAX()"/>&nbsp; ServiceTRAX &nbsp;&nbsp;
                                <input type="checkbox" id="statusTRAX" data-bind="click:showRoles($data.isStatusTRAX(), 'statusTRAX'), checked: isStatusTRAX()" />&nbsp; StatusTRAX
                                <div class="help-block invalid-feedback" data-bind="validationMessage: system"></div>
                                    
                            </div>
                        </div>
                        <div class="col-4">
                            <label for="systemCheck">
                                Local Service Provider
                            </label>
                            <div class="input-group">
                                <input type="checkbox" id="lspUser" data-bind="click:changeLSPUserSelected(),checked: isLSPUserSelected()" />&nbsp; LSP User &nbsp;&nbsp;
                            </div>
                        </div>

                        <div class="col-4">
                            <label for="systemCheck">
                                Primary Contact
                            </label>
                            <div class="input-group">
                                <input type="checkbox" id="primaryContact" data-bind="click:changePrimaryContactSelected(),checked: isPrimaryContact()" />&nbsp; Is Primary Contact&nbsp;&nbsp;
                            </div>
                        </div>
                    </div>
                    <div class="form-row mb-3" data-bind="visible:isServiceTRAX()">
                        <div class="col-6">
                            <label for="uroles">
                                User Roles
                            </label>
                            <div class="input-group">
                                <select class="form-control col-12"
                                        id="uroles"
                                        data-style="btn-white shadow-sm"
                                        data-bind="enable:!isLSPUserSelected(),selectPicker:true, options: $root.roles, optionsText: 'roleName', optionsValue: 'roleID', valueAllowUnset: true, selectedOptions: selectedRoles"
                                        data-none-selected-text="Select user roles..."
                                        multiple>
                                </select>
                            </div>
                            <!-- ko if:!isLSPUserSelected()-->
                                <div class="help-block invalid-feedback" data-bind="validationMessage: selectedRoles"></div>
                            <!-- /ko -->
                        </div>
                        <div class="col-6" >
                            <label for="ctypesel">
                                Contact Type
                            </label>
                            <div class="input-group">
                                <select class="form-control col-12"
                                        id="ctypesel"
                                        data-style="btn-white shadow-sm"
                                        data-bind="enable:!isLSPUserSelected(), selectPicker:true, options: $root.contactTypes, optionsText: 'name' , optionsValue: 'code' , value: selectedContactType"
                                        data-none-selected-text="Select user roles...">
                                </select>
                            </div>
                            <!-- ko if:!isLSPUserSelected()-->
                                <div class="help-block invalid-feedback" data-bind="validationMessage: selectedRoles"></div>
                            <!-- /ko -->
                        </div>
                    </div>
                    <!-- /ko -->
                    <!-- ko if:wizardPage()=== 'lsp'-->
                    <div class="form-group mb-3">
                        <label for="lspUsers">
                            LSP Users
                        </label>

                        <div class="input-group">
                            <select class="form-control col-10 p-0 pr-1"
                                    id="lspUsers"
                                    data-style="btn-white shadow-sm"
                                    data-bind="selectPicker:true, options: lspUsers(), optionsText: 'lspName', optionsValue: 'lspId', valueAllowUnset: true, selectedOptions: selectedLSPUsers"
                                    data-none-selected-text="Select LSPs..."
                                    multiple>
                            </select>
                            <button class="btn btn-primary align-self-end col-2" style="margin-left:10px"
                                title="Create new LSP User..."
                                type="button"
                                data-bind="click:function() { displayLSPUserDialog(); }">
                            NEW
                            </button>
                        </div>
                    </div>
                    <!-- /ko -->
                    <!-- ko if:wizardPage()==='locations' -->
                    <!-- ko with:defaultUserOrgCustomer() -->
                    <div class="form-group mb-3">
                        <label>
                            Default Organization
                        </label>
                        <div class="input-group">
                            <select class="col-4 p-0 pr-1"
                                    data-style="btn-white shadow-sm"
                                    data-bind="selectPicker:true, options: $parent.availableOrgs(organization), optionsText: 'organizationName', optionsValue: 'organizationId', valueAllowUnset: true, value: organization"
                                    data-none-selected-text="Select Default Organization...">
                            </select>
                            <select class="col-8 p-0"
                                    data-style="btn-white shadow-sm"
                                    data-live-search="true"
                                    data-size="10"
                                    data-bind="enable:customers().length > 0, selectPicker:true, options: customers, optionsText: 'customer_Name', optionsValue: 'customer_Id', valueAllowUnset: true, selectedOptions: selectedCustomers"
                                    data-none-selected-text="All customers..."
                                    multiple>
                            </select>
                        </div>
                        <div class="help-block invalid-feedback" data-bind="validationMessage: $parent.defaultUserOrgCustomerValue"></div>
                    </div>
                    <!-- /ko -->
                    <!-- ko if:orgCustomers().length > 0 -->
                    <hr style="border-color:dimgray" />
                    <!-- /ko -->
                    <!-- ko foreach:orgCustomers() -->
                    <div class="form-group mb-3">
                        <div class="input-group">
                            <select class="col-4 p-0 pr-1"
                                    data-style="btn-white shadow-sm"
                                    data-bind="selectPicker:true, options: $parent.availableOrgs(organization), optionsText: 'organizationName', optionsValue: 'organizationId', valueAllowUnset: true, value: organization"
                                    data-none-selected-text="Select Organization...">
                            </select>
                            <select class="col-7 m-0 p-0 pr-1"
                                    data-style="btn-white shadow-sm"
                                    data-live-search="true"
                                    data-size="10"
                                    data-bind="enable:customers().length > 0, selectPicker:true, options: customers, optionsText: 'customer_Name', optionsValue: 'customer_Id', valueAllowUnset: true, selectedOptions: selectedCustomers"
                                    data-none-selected-text="All customers..."
                                    multiple>
                            </select>
                            <button type="button" class="btn btn-red col-1 m-0" data-bind="click:() => $parent.removeOrgCustomer($index())"><em class="fas fa-trash"></em></button>
                        </div>
                    </div>
                    <!-- /ko -->
                    <div class="form-row mb-3">
                        <div class="col-12">
                            <button type="button" class="btn btn-green px-4" data-bind="click:addOrgCustomer, disable:orgCustomers().length === $root.organizations.length-1">
                                <em class="fas fa-plus mr-2"></em> ADD USER ORGANIZATION
                            </button>
                        </div>
                    </div>
                    <!-- /ko -->
                    <!-- ko if:wizardPage()==='resources' -->
                    <div class="form-group mb-3">
                        <label>
                            (Optional) Select any Checkbox below to create an Organization's Resource for User
                        </label>
                        <div class="mt-3 mr-2">
                            <div class="d-flex mb-2">
                                <div class="col-3 magic-checkbox-wrapper">
                                    <input class="magic-checkbox" type="checkbox" id="defaultOrgResCreate" data-bind="checked: $data.defaultUserOrgCustomer().createResource" />
                                    <label for="defaultOrgResCreate" data-bind="text:$root.organizations.find(o => $data.defaultUserOrgCustomer().organization() == o.organizationId).organizationName"></label>
                                </div>
                                <select class="col-6 p-0 pr-1"
                                        data-style="btn-white shadow-sm"
                                        data-bind="selectPicker:true, enable: $data.defaultUserOrgCustomer().createResource(), options: $root.organizationRoles.filter(o=>o.organizationId === $data.defaultUserOrgCustomer().organization()), optionsText: 'name', optionsValue: 'role_ID', value: $data.defaultUserOrgCustomer().roleid"
                                        data-none-selected-text="Select Role...">
                                </select>
                            </div>
                            <!-- ko foreach:orgCustomers().filter(o => o.organization() !== null) -->
                            <div class="d-flex mb-2">
                                <div class="col-3 magic-checkbox-wrapper">
                                    <input class="magic-checkbox" type="checkbox" id="isSendToScheduleCheck" data-bind="attr: {id: $index}, checked:createResource" />
                                    <label data-bind="attr: {for: $index}, text:$root.organizations.find(o => organization() == o.organizationId).organizationName"></label>
                                </div>
                                <select class="col-6 p-0 pr-1"
                                        data-style="btn-white shadow-sm"
                                        data-bind="selectPicker:true, enable: createResource(), options: $root.organizationRoles.filter(o=>o.organizationId === organization()), optionsText: 'name', optionsValue: 'role_ID', value: roleid"
                                        data-none-selected-text="Select Role...">
                                </select>
                            </div>
                            <!-- /ko -->
                        </div>
                    </div>
                    <!-- /ko -->
                    <!-- ko if:wizardPage()==='summary' -->
                    <div class="form-row mb-3">
                        <label>
                            User Summary
                        </label>
                    </div>
                    <div class="">
                        <div class="row">
                            <div class="col-12">Username: <span data-bind="text:username"></span></div>
                        </div>
                        <div class="row"><div class="col-12">Email: <span data-bind="text:email"></span></div></div>
                        <div class="row"><div class="col-12">First Name: <span data-bind="text:firstname"></span></div></div>
                        <div class="row"><div class="col-12">Middle Name: <span data-bind="text:middlename"></span></div></div>
                        <div class="row"><div class="col-12">Last Name: <span data-bind="text:lastname"></span></div></div>
                        <div class="row"><div class="col-12">Roles</div></div>
                        <!-- ko foreach:selectedRoles -->
                        <div data-bind="text:roleName"></div>
                        <!-- /ko -->
                        <div class="row"><div class="col-12">Organizations &Aacute; Customers</div></div>
                        <!-- ko foreach:orgCustomers() -->
                        <div data-bind="text:roleName"></div>
                        <!-- /ko -->
                    </div>
                    <!-- /ko -->
                </form>
            </div>
            <div class="modal-footer">
                <div class="row mt-4">
                    <div class="col-12 ml-auto">
                        <!-- ko if:wizardPage()==='user' -->
                        <button type="button" class="btn btn-green float-right rounded px-4" data-bind="click:goToLocationsPage"><em class="fas fa-arrow-right mr-2"></em> SELECT USER LOCATIONS</button>
                        <!-- /ko -->
                        <!-- ko if:wizardPage()==='locations' -->
                            <!-- ko if:isServiceTRAX-->
                            <!-- ko if: isLSPUserSelected -->
                        <button type="button" class="btn btn-green float-right rounded px-4 mr-2" data-bind="click:goToLSPPage"><em class="fas fa-arrow-right mr-2"></em> SELECT LSPs</button>
                            <!-- /ko -->
                            <!-- ko ifnot: isLSPUserSelected -->
                                <button type="button" class="btn btn-green float-right rounded px-4 mr-2" data-bind="click:goToResourcesPage"><em class="fas fa-arrow-right mr-2"></em> RESOURCES</button>
                            <!-- /ko -->
                            <button type="button" class="btn btn-green float-right rounded px-4 mr-2" data-bind="click:goToUsersPage"><em class="fas fa-arrow-left mr-2"></em> USER SETTINGS</button>
                            <!-- /ko -->
                            <!-- ko ifnot:isServiceTRAX-->
                            <button type="button" class="btn btn-primary float-right rounded px-4" data-bind="click:createUser"><em class="fas fa-save mr-2"></em> CREATE USER</button>
                            <button type="button" class="btn btn-green float-right rounded px-4 mr-2" data-bind="click:goToUsersPage"><em class="fas fa-arrow-left mr-2"></em> USER SETTINGS</button>
                            <!-- /ko --> 
                        <!-- /ko -->
                        <!-- ko if:wizardPage()==='resources' -->
                            <!-- ko if: runningUserCreation -->
                            <button type="button" class="btn btn-green float-right px-4 d-flex" data-bind="disable:true">
                            <span class="spinner-border spinner-border-sm align-self-center mr-3" role="status" aria-hidden="true"></span>
                            CREATING USER
                            </button>
                            <!-- /ko -->
                            <!-- ko ifnot: runningUserCreation -->
                                <!-- ko ifnot: isLSPUserSelected -->
                                <button type="button" class="btn btn-primary float-right rounded px-4" data-bind="click:createUser"><em class="fas fa-save mr-2"></em> CREATE USER</button>
                                <button type="button" class="btn btn-green float-right rounded px-4 mr-2" data-bind="click:goToLocationsPage"><em class="fas fa-arrow-left mr-2"></em> ORGANIZATIONS</button>
                                <!-- /ko-->
                                <!-- ko if: isLSPUserSelected -->
                                <button type="button" class="btn btn-green float-right rounded px-4" data-bind="click:goToLSPPage"><em class="fas fa-arrow-right mr-2"></em> SELECT LSPs</button>
                                <button type="button" class="btn btn-green float-right rounded px-4 mr-2" data-bind="click:goToLocationsPage"><em class="fas fa-arrow-left mr-2"></em> ORGANIZATIONS</button>
                                <!-- /ko-->
                            <!-- /ko -->
                        <!-- /ko -->
                        <!-- ko if:wizardPage()==='lsp'-->
                        <button type="button" class="btn btn-primary float-right rounded px-4" data-bind="click:createUser"><em class="fas fa-save mr-2"></em> CREATE USER</button>
                        <button type="button" class="btn btn-green float-right rounded px-4 mr-2" data-bind="click:goToLocationsPage"><em class="fas fa-arrow-left mr-2"></em>ORGANIZATIONS</button>
                        <!-- /ko-->
                        <!-- ko if:wizardPage()==='summary' -->
                        <button type="button" class="btn btn-primary float-right px-4" data-bind="click:createUser"><em class="fas fa-save mr-2"></em> CREATE USER</button>
                        <button type="button" class="btn btn-green float-right px-4 mr-2" data-bind="click:goToLocationsPage"><em class="fas fa-arrow-left mr-2"></em> ORGANIZATIONS</button>
                        <!-- /ko -->
                        
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade modal--forms" data-bind="showModal:isLSPUserDialogDisplaying" id="newLSPModal" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="newLSPUserLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content modal-content--dark-blue">
            <div class="modal-header pb-0">
                <h5 class="modal-title mr-auto ucase"><em class="fas fa-user-plus mr-2"></em>NEW LSP USER</h5>
                <button type="button" class="btn icon-only" data-bind="click:closeLSPUserDialog">
                    <em class="fas fa-times"></em>
                </button>
            </div>
            <div class="modal-body">

                <form>
                    <div class="form-row mb-3">
                        <div class="col-12">
                            <label for="nlmLSPName">
                                LSP Name
                            </label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="nlmLSPName" data-bind="value: newLSPUser.lspName" />
                                <div class="help-block invalid-feedback" data-bind="validationMessage: newLSPUser.lspName"></div>
                            </div>
                        </div>
                    </div>
                    <div class="form-row mb-3">
                        <div class="col-6">
                            <label for="nlmLSPAddress1">
                                Address 1
                            </label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="nlmLSPAddress1" data-bind="value: newLSPUser.address1" />
                                @*<div class="help-block invalid-feedback" data-bind="validationMessage: newLocationDetails.job_location_name"></div>*@
                            </div>
                        </div>
                        <div class="col-6">
                            <label for="nlmLSPAddress2">
                                Address 2
                            </label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="nlmLSPAddress2" data-bind="value: newLSPUser.address2" />
                                @*<div class="help-block invalid-feedback" data-bind="validationMessage: newLocationDetails.job_location_name"></div>*@
                            </div>
                        </div>

                    </div>
                    <div class="form-row mb-3">

                        <div class="col-3">
                            <label for="nlmLSPCity">
                                City
                            </label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="nlmLSPCity" data-bind="value: newLSPUser.city" />
                                @*<div class="help-block invalid-feedback" data-bind="validationMessage: newLocationDetails.job_location_name"></div>*@
                            </div>
                        </div>
                        <div class="col-3">
                            <label for="nlmLSPState">
                                State
                            </label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="nlmLSPState" data-bind="value: newLSPUser.state" />
                                @*<div class="help-block invalid-feedback" data-bind="validationMessage: newLocationDetails.job_location_name"></div>*@
                            </div>
                        </div>
                        <div class="col-2">
                            <label for="nlmLSPZip">
                                Zip
                            </label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="nlmLSPZip" data-bind="value: newLSPUser.zip" />
                                @*<div class="help-block invalid-feedback" data-bind="validationMessage: newLocationDetails.job_location_name"></div>*@
                            </div>
                        </div>
                    </div>
                </form>

            </div>
            <div class="modal-footer">

                <div class="row">
                    <div class="col-10">
                        <button type="button" class="btn btn-primary float-right rounded px-4" data-bind="click:upsertLSPUser">
                            SAVE
                        </button>
                    </div>
                    <div class="col-2">
                        <button type="button" class="btn btn-green float-left rounded px-4 mr-2" data-bind="click:closeLSPUserDialog">CANCEL</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- /ko -->
<!-- ko with:assignUserCustomersDialog-->
<div class="modal fade modal--forms" id="AssignUserCustomersDialog" data-bind="showModal:isDialogDisplaying"
     tabindex="-1" data-backdrop="static" role="dialog" aria-labelledby="NewUserModal" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content modal-content--dark-blue">
            <div class="modal-header pb-0">
                <h5 class="modal-title mr-auto ucase"><em class="fas fa-user-plus mr-2"></em>USER CUSTOMERS</h5>
                <button type="button" class="btn icon-only" data-bind="click:closeDialog">
                    <em class="fas fa-times"></em>
                </button>
            </div>
            <div class="modal-body pt-2">
                <form>
                    <div class="form-row">
                        <div class="col-12">
                            <label for="custSelection">
                                Customer Selection
                            </label>
                            <div class="input-group">
                                <select class="m-0 p-0 pr-1"
                                        data-style="btn-white shadow-sm"
                                        data-live-search="true"
                                        id="custSelection"
                                        data-size="10"
                                        data-bind="enable:customers().length > 0, selectPicker:true, options: customers, optionsText: 'customer_name', optionsValue: 'customer_id', valueAllowUnset: true, selectedOptions: selectedCustomers"
                                        data-none-selected-text="All customers..."
                                        multiple>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="form-row pt-4">
                        <div class="col-12">
                            <label for="selectedCustChips">
                                Selected Customers
                            </label>
                            <div class="input-group">
                                <div class="d-flex flex-wrap p-2" id="selectedCustChips">
                                    <!-- ko foreach: selectedCustomersObjects -->
                                    <div class="chip align-items-center">
                                        <strong data-bind="text:customer_name"></strong>
                                        <span class="closebtn" data-bind="click:() => { $parent.removeCustomer(customer_id); }">&times;</span>
                                    </div>
                                    <!-- /ko -->
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- /ko -->





@await Html.PartialAsync("_NotificationDialog")

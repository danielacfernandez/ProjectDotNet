@model ServiceTRAX.Models.ViewModels.PermissionsDisplayViewModel
@{
    ViewData["Title"] = "Permissions";


}



@section Scripts {
    <script type='text/javascript' src='~/lib/knockout/knockout-latest.js'></script>
    <script type='text/javascript' src='~/lib/moment/moment.min.js'></script>
    <script type='text/javascript' src='~/lib/moment-business-days/index.js'></script>
    <script type='text/javascript' src='~/js/ko-bindingHandlers.js'></script>
    <script type='text/javascript' src='~/override/main-custom.js'></script>
    <script type='text/javascript' src='~/js/colored-calendar.js'></script>
    <script type='text/javascript' src='~/js/notification-dialog.js'></script>

    <style>
        table.customTable {
            font-size: 14px;
            width: 100%;
            background-color: #FFFFFF;
            border-collapse: collapse;
            border-width: 2px;
            border-color: #7EA8F8;
            border-style: solid;
            color: #000000;
        }

            table.customTable td, table.customTable th {
                padding: 5px;
            }


            table.customTable tr .grouprow {
                background-color: rgba(126, 168, 248, 0.35);
            }

            table.customTable td[scope=row] {
                white-space: pre;
            }

            table.customTable thead {
                background-color: #7EA8F8;
                text-align: center;
            }


        td.centered {
            text-align: center;
        }

        tr.fixedtop th {
            position: sticky;
            top: 0;
            background-color: #7EA8F8;
        }
    </style>

    <script type="text/javascript">

        $(function () {
            model = {};

            model.coloredCalendar = coloredCalendar;
            model.callbackfromcalendar = function (date) {
                console.log('in permissions: ', date);
            }


            model.notificationDialog1 = notificationDialog;
            model.notificationDialog2 = notificationDialog;

            model.doX = function () {
                console.log('X done.');
            }

            model.syncPermissions = function () {
                postWrapper('/api/v1/syncpermissions', ko.toJSON(`@Html.Raw(Model.RolePagePermissionsInsertStatements)`))
                    .then(() => redirectToPage('/Account/Permissions', { OrganizationID: @Model.OrganizationID}));
            };

            ko.bindingHandlers.showModal = ServiceTRAXBindingHandlers.showModal;
            ko.applyBindings(model);
        });

    </script>

}

<h2 class="mt-3">Permissions</h2>
<p class="small">Note permissions are static declared into code, this is a Readonly view of current system roles and permissions assigned to them.</p>

@*<button class="btn btn-primary" data-bind="click:() => coloredCalendar.showCalendar(14, 5, callbackfromcalendar, false)">Show Business Days Calendar</button>
    <button class="btn btn-primary" data-bind="click:function() { coloredCalendar.showCalendar(14, 5, callbackfromcalendar, true); }">Show Weekends Calendar</button>
    <button class="btn btn-primary" data-bind="click:function() { notificationDialog1.displayDialog('Sample Title', 'Sample body notice'); }">Show Notification Dialog</button>
    <button class="btn btn-primary" data-bind="click:function() { notificationDialog1.displayConfirmationDialog('This is a confirmation dialog', 'Confirm to do X?', doX); }">Show Confirmation Dialog</button>
    <button class="btn btn-primary" data-bind="click:function() { notificationDialog1.displayConfirmationDialog('This is a confirmation dialog', 'You like spiders?', doX, {'ok': 'YEP', 'cancel': 'NOPE' }); }">Spider Test</button>*@

@if (Model.Matrix.HasIssues)
{
    <div class="alert alert-danger" role="alert">
        Code permissions differs from Database permissions, you may want to sync permissions.
        <button class="btn btn-red ml-5" data-bind="click:syncPermissions">SYNC PERMISSIONS</button>
    </div>
}



<table class="table mt-4 customTable">
    <thead>
        <tr class="fixedtop">
            <th scope="col"></th>

            @foreach (var roleHeader in Model.Matrix.ColHeaders)
            {
                <th scope="col">@roleHeader.RoleName</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var permissionGroup in Model.Matrix.RowHeaders.GroupBy(r => r.GroupName))
        {
            <tr>
                <th colspan="@(Model.Matrix.ColHeaders.Count()+1)" class="grouprow">@permissionGroup.Key</th>
            </tr>

            @foreach (var permission in permissionGroup)
            {
                <tr>
                    <td scope="row">&#9;@permission.ShortName</td>
                    @foreach (var role in Model.Matrix.ColHeaders)
                    {
                        switch (@Model.Matrix.HasPermission[Tuple.Create(role.RoleName, (short)permission.Permission)])
                        {
                            case ServiceTRAX.Models.ViewModels.PermissionComparisonResult.SETANDEQUAL:
                                <td class="centered"><i class="fas fa-circle"></i></td>
                                break;
                            case ServiceTRAX.Models.ViewModels.PermissionComparisonResult.NOTSETANDEQUAL:
                                <td class="centered"><i class="far fa-circle"></i></td>
                                break;
                            case ServiceTRAX.Models.ViewModels.PermissionComparisonResult.SETBUTDIFFERENT:
                                <td class="centered"><i class="fas fa-circle" style="color:red"></i></td>
                                break;
                            case ServiceTRAX.Models.ViewModels.PermissionComparisonResult.NOTSETBUTDIFFERENT:
                                <td class="centered"><i class="far fa-circle" style="color:red"></i></td>
                                break;
                        }

                        @*if (@Model.Matrix.HasPermission[Tuple.Create(role.RoleName, (short)permission.Permission)])
                            {
                                <td class="centered"><i class="fas fa-circle"></i></td>
                            }
                            else
                            {
                                <td class="centered"><i class="far fa-circle"></i></td>
                            }*@

                    }
                </tr>
            }
        }
    </tbody>
</table>





<table class="table mt-4 customTable">
    <thead>
        <tr>
            <th scope="col"></th>

            @for (int x = 0; x < 50; x++)
            {
                <th scope="col">@x</th>
            }
        </tr>
    </thead>
    <tbody>
        @for (int y = 0; y < 300; y = y + 50)
        {
            <tr>
                <th scope="row" class="grouprow">@y</th>
                @for (int x = 0 + y; x < 50 + y; x++)
                {
                    if (x < 255)
                    {
                        if (ViewBag.PermissionsDictionary.TryGetValue((short)x, out ServiceTRAX.Identity.Authorization.PermissionDisplay currentPermission))
                        {
                            <td class="centered" title="ID @x -- @currentPermission.ShortName"><i class="fas fa-circle"></i></td>
                        }
                        else
                        {
                            <td class="centered" title="ID @x -- Not used"><i class="far fa-circle"></i></td>
                        }
                    }
                    else
                    {
                        <td></td>
                    }
                }
            </tr>
        }
    </tbody>
</table>


<table class="table mt-4 customTable">
    <thead>
        <tr class="fixedtop">
            <th scope="col">ID</th>
            <th scope="col">Group</th>
            <th scope="col">Name</th>
            <th scope="col">Description</th>
        </tr>
    </thead>
    <tbody>

        @foreach (var permission in Model.Permissions.OrderBy(p => p.GroupName).ThenBy(p => p.Permission))
        {
            <tr>
                <td>@((short)permission.Permission)</td>
                <td>@permission.GroupName</td>
                <td>@permission.ShortName</td>
                <td>@permission.Description</td>
            </tr>
        }
    </tbody>
</table>
<div class="row">
    <div class="col-12">
        <textarea class="w-100" rows="50" style="font-size:small">@Model.RolePagePermissionsInsertStatements</textarea>
    </div>
</div>




@await Html.PartialAsync("_ColoredCalendar")
@await Html.PartialAsync("_NotificationDialog")
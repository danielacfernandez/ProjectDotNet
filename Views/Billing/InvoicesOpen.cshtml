@model ServiceTRAX.Models.ViewModels.BillingInvoicesOpenViewModel
@using ServiceTRAX.Identity

@{
    ViewData["Title"] = "Open Invoices";
}

@section StyleSheets {

    <link rel="stylesheet" href="~/css/datepicker.css" />

    <style>
        .gridContent {
            position: absolute;
            border: solid 1px #c0c0c0;
            left: 20px;
            top: 180px;
            right: 20px;
            bottom: 70px;
        }

        .cmdNewRecord {
            display: inline-block;
        }
    </style>
}



@section Scripts {

    <link rel="stylesheet" href="~/css/mygrid.1.0.css" asp-append-version="true">
    <script language="javascript" type="text/javascript" src="~/lib/mygrid.1.0.js" asp-append-version="true"></script>
    <script type='text/javascript' src='~/lib/knockout/knockout-latest.js'></script>
    <script type='text/javascript' src='~/lib/moment/moment.min.js'></script>
    <script type='text/javascript' src='~/lib/datepicker.js'></script>
    <script type='text/javascript' src='~/js/ko-bindingHandlers.js' asp-append-version="true"></script>
    <script type='text/javascript' src='~/override/main-custom.js' asp-append-version="true"></script>
    <script type='text/javascript' src='~/js/notification-dialog.js' asp-append-version="true"></script>

    <script type="text/javascript">

        const openJobInvoice = function (jobid, invoiceid, source) {
            redirectToPage('/Billing/ByJobInvoice', { 'OrganizationID': @Model.OrganizationID, 'JobID': jobid, 'InvoiceID': invoiceid, 'SelectedTab': source });
        }



        $(function () {
            var gridName = "BillingInvoicesOpen";
            var oGrid = null;
            var model =  @Html.Raw(Json.Serialize(Model));
            //
            model.notificationDialog = notificationDialog;
            model.sendingToAccountingDialog = notificationDialog;

            model.processInvoices = function (invoices) {
                postWrapper('/api/v1/invoiceprocess', invoices)
                    .then((r) => {
                        if (!r.value.succeeded) {
                            model.notificationDialog.displayDialog('INVOICING ERROR', r.value.resultMessage.replace('|', '\n'));
                        };
                        oGrid.refresh();
                    });
            }

            model.gridEvents = {
                buttonClick: function (btn, row) {
                    // Open grid in Modal
                    if (btn.id === 'cmdBillingInvServiceLineDetail' || btn.id === 'cmdBillingInvCustomLineDetail') {
                        return true;
                    }

                    if (btn.id === 'cmdInvoice') {

                        var invoices = ko.toJSON({ 'KEYIDTABLE': row.map(r => r.INVOICE_ID) });
                        postWrapper('/api/v1/getpoopenwithoutinvoices', invoices)
                            .then ((r) => {
                                console.log(r);
                                if (r.value.resultMessage > 0)
                                    model.sendingToAccountingDialog.displayConfirmationDialog('POs OPEN', 'There are open ' + r.value.resultMessage + ' purchase order(s), are you sure you want to invoice?', () => model.processInvoices(invoices))
                                else 
                                    if (r.value.resultMessage == 0)
                                        model.processInvoices(invoices);
                            });
                    }

                    // This command is actually from BillingInvServiceLineDetail.xml Grid (is opened from BillingInvoicesOpen in a popup)
                    if (btn.id === 'cmdUnassign') {
                        postWrapper('/api/v1/invoiceservicelinesunassign', ko.toJSON({ 'JOBID': row[0].JOB_ID, 'INVOICEID': row[0].INVOICE_ID, 'KEYIDTABLE': row.map(r => r.SERVICE_LINE_ID.toString()), 'GRIDTYPE': 'DETAIL' }))
                            .then(() => { this.refreshGrid(); });
                    }
                    return false;
                }
            };

            model.getGridParameters = function () {
                return {
                    'ORGANIZATION_ID': @Model.OrganizationID,
                    'FROMDATE': moment(model.dateFrom()).toISOString(),
                    'TODATE': moment(model.dateTo()).toISOString(),
                    'RUNNING_AS_USERID': @User.GetUserID(),
                    'JOBID': null
                };
            }

            function gridReset() {
                oGrid.reset(gridName, model.gridEvents, model.getGridParameters());
            }

            model.dateFrom = ko.observable(model.dateFrom);
            model.dateFrom.subscribe(function () { gridReset(); });
            model.dateTo = ko.observable(model.dateTo);
            model.dateTo.subscribe(function () { gridReset(); });

            oGrid = new clsMyGrid(gridName, document.getElementById('openInvcTEG'), null, model.gridEvents, true, model.getGridParameters());

            //
            // Custom Bindings
            //
            ko.bindingHandlers.selectPicker = ServiceTRAXBindingHandlers.selectPicker;
            ko.bindingHandlers.showModal = ServiceTRAXBindingHandlers.showModal;
            ko.bindingHandlers.datepicker = ServiceTRAXBindingHandlers.datepicker;
            //
            //
            ko.applyBindings(model);

        });

    </script>

}



<div id="content" class="pl-0">
    <div class="container-fluid pl-0">
        <div class="d-flex flex-row">
            <h2>OPEN INVOICES</h2>
            <div class="ml-auto">
                <div class="form-inline" style="align-items:flex-end">
                    <label class="mr-2">
                        Date From
                    </label>
                    <div class="input-group" id="triggerFromDate">
                        <input type="text"
                               autocomplete="off"
                               class="form-control m-0"
                               data-bind="datepicker: dateFrom, datepickerOptions: {  trigger: '#triggerFromDate' }"
                               required />
                        <div class="input-group-append simulate-button">
                            <span class="input-group-text input-group-append-custom">
                                <i class="fas fa-calendar"></i>
                            </span>
                        </div>
                    </div>
                    <label class="ml-5 mr-2">
                        Date To
                    </label>
                    <div class="input-group" id="triggerToDate">
                        <input type="text"
                               autocomplete="off"
                               class="form-control m-0"
                               data-bind="datepicker: dateTo, datepickerOptions: {  trigger: '#triggerToDate' }"
                               required />
                        <div class="input-group-append simulate-button">
                            <span class="input-group-text input-group-append-custom">
                                <i class="fas fa-calendar"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div id="content-wrap">
            <div class="gridContent qrsGrid myGrid" id="openInvcTEG"></div>
        </div>
    </div>
</div>

@await Html.PartialAsync("_NotificationDialog")
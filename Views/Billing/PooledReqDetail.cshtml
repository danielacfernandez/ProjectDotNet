@model ServiceTRAX.Models.ViewModels.PooledReqDetailViewModel

@{
    ViewData["Title"] = "Requisition Detail";
}

@section Scripts {
    <script type='text/javascript' src='~/lib/knockout/knockout-latest.js'></script>
    <script type='text/javascript' src='~/js/ko-bindingHandlers.js'></script>

    <script>

        $(document).ready(function () {

        });

        $(function () {
            var model =  @Html.Raw(Json.Serialize(Model));
            console.log(model);

            for (alloc of model.allocations) {
                alloc.description = `<div class="expandablearea">${alloc.description}</div>`;
            }

            model.allocations = ko.observableArray(model.allocations);



            model.requisition.totalToAlloc = ko.observable(model.requisition.qty_left);
            for (var i = 0; i < model.allocations().length; i++) {
                model.allocations()[i].checked = ko.observable(false);
                model.allocations()[i].qtyAlloc = ko.observable(0);
                model.allocations()[i].qtyAlloc.subscribe(function () {
                    for (var j = 0; j < model.allocations().length; j++) {
                        if (model.allocations()[j].qtyAlloc() > 0) {
                            model.allocations()[j].checked(true);
                        }
                    }
                    let count = 0;
                    for (var j = 0; j < model.allocations().length; j++) {
                        if (model.allocations()[j].checked()) {
                            count += parseFloat(model.allocations()[j].qtyAlloc());
                        }
                    }
                    model.requisition.totalToAlloc(count);
                });
            }

            //model.valMod = (reqNo) => {
            //    for (var i = 0; i < model.allocations().length; i++) {
            //        if (model.allocations()[i].reqNo === reqNo) {
            //            model.allocations()[i].qtyAlloc(!model.allocations()[i].checked());
            //        }
            //    }
            //}

            model.allocateSel = () => {
                if (model.requisition.totalToAlloc() > 0) {
                    if (model.requisition.totalToAlloc() <= model.requisition.qty_left) {
                        let count = 0;
                        for (var i = 0; i < model.allocations().length; i++) {
                            if (model.allocations()[i].checked()) {
                                count++;
                            }
                        }
                        if (count > 0) {
                            let qtyToAlloc = model.requisition.totalToAlloc() / count;
                            for (var i = 0; i < model.allocations().length; i++) {
                                if (model.allocations()[i].checked()) {
                                    model.allocations()[i].qtyAlloc(qtyToAlloc);
                                }
                            }
                        } else {
                            alert('Please select at least one Requisition');
                        }

                    } else {
                        alert('Allocate hours cannot be bigger than Qty Left');
                    }
                } else {
                    alert('Please input Allocate hours');
                }
            }

            model.save = () => {

                model.dataToSend = {
                    organizationID: model.organizationID,
                    jobID: model.jobID,
                    serviceID: model.requisition.service_id,
                    itemID: model.requisition.item_id,
                    rate: model.requisition.rate,
                    qtyLeft: model.requisition.qty_left,
                    allocations: []
                }

                let anyChecked = false;
                let anyQtyZero = false;
                let qtySum = 0;

                for (var i = 0; i < model.allocations().length; i++) {
                    if (model.allocations()[i].checked()) {
                        anyChecked = true;
                        if (parseFloat(model.allocations()[i].qtyAlloc()) === 0) {
                            anyQtyZero = true;
                        }
                        model.dataToSend.allocations.push({ ServiceID: model.allocations()[i].service_id, QtyToAllocate: parseFloat(model.allocations()[i].qtyAlloc()) });
                        qtySum += parseFloat(model.allocations()[i].qtyAlloc());
                    }
                }
                console.log(model.dataToSend);
                if (model.requisition.totalToAlloc() > model.requisition.qty_left) {
                    alert('Allocate hours cannot be bigger than Qty Left');
                } else {
                    if (!anyChecked) {
                        alert('Please select at least one Requisition');
                    } else {
                        if (anyQtyZero) {
                            alert('All quantities must be greater than zero');
                        } else {
                            if (qtySum > model.requisition.qty_left) {
                                alert('Total allocated amount cannot be bigger than allocate hours');
                            } else {
                                $('.saveBtn').hide();
                                $('.saveSpn').show();
                                fetch(`../api/v1/savereqallocation`,
                                    {
                                        method: 'POST',
                                        body: ko.toJSON(model.dataToSend),
                                        headers: { 'Content-Type': 'application/json' }
                                    })
                                    .then(() => {
                                        setTimeout(function () {
                                            $('.saveBtn').show();
                                            $('.saveSpn').hide();
                                            window.location = '/Billing/PooledReqs?OrganizationID=@Model.OrganizationID&JobID=' + model.jobID;
                                        }, 2000);

                                    });
                            }
                        }
                    }
                }
            }

            ko.applyBindings(model);
        });
    </script>
}

@section StyleSheets {

    <style>
        .form-inline label {
            justify-content: left;
            margin-bottom: 1px;
        }

        .table td {
            vertical-align: inherit;
            padding: .4rem;
            text-align: center;
        }

        .table th {
            text-align: center;
        }

        .expandablearea {
            height: 0;
            max-height: 0;
        }

            .expandablearea:hover {
                height: 100%;
                max-height: 1000px;
                transition: max-height 0.5s ease-in;
            }

    </style>
}

<div class="container">
    <br />
    <div class="col pl-0 ml-0">
        <h2>REQUISITION DETAILS</h2>
    </div>
    <br />
    <h5>@Model.Requisition.description</h5>
    <div class="form-group form-inline">
        <div class="col-2">
            <label>Item</label>
            <input type="text" class="form-control" data-bind="value: $root.requisition.item_name" readonly />
        </div>
        <div class="col-2">
            <label>Rate</label>
            <input type="text" class="form-control" data-bind="value: (Math.round(parseFloat($root.requisition.rate)*100)/100).toFixed(2)" readonly />
        </div>
        <div class="col-2">
            <label>Qty Total</label>
            <input type="text" class="form-control" data-bind="value: (Math.round(parseFloat($root.requisition.qty_pooled)*100)/100).toFixed(2)" readonly />
        </div>
        <div class="col-2">
            <label>Qty Dist</label>
            <input type="text" class="form-control" data-bind="value: (Math.round(parseFloat($root.requisition.qty_dist)*100)/100).toFixed(2)" readonly />
        </div>
        <div class="col-2">
            <label>Qty Left</label>
            <input type="text" class="form-control" data-bind="value: (Math.round(parseFloat($root.requisition.qty_left)*100)/100).toFixed(2)" readonly />
        </div>
        <div class="col-2">
            <label>Allocate</label>
            <input type="number" class="form-control" onclick="select()" data-bind="value: $root.requisition.totalToAlloc" />
        </div>
    </div>
    <br />
    <h5>External Requisitions - Current Allocation</h5>
    <div class="form-group">
        <button class="btn btn-green" style="margin-right: 5px;" data-bind="click: () => $root.allocateSel()">Allocate Selected</button>
        <button data-bind="click: () => $root.save()" class="btn btn-primary"><span class="saveBtn">Save  </span><span class="saveSpn" style="display:none;">Saving... </span><span class="spinner-border spinner-border-sm saveSpn" role="status" aria-hidden="true" style="vertical-align: middle; display:none;"></span></button>
    </div>
    
    <table class="table table-striped table-bordered table-sm ">
        <thead>
            <tr>
                <th scope="col" style="width: 5%"></th>
                <th scope="col" style="width: 10%">Requisition No</th>
                <th scope="col" style="width: 78%">Description</th>
                <th scope="col" style="width: 7%">Quantity</th>
            </tr>
        </thead>
        <tbody>
            <!-- ko foreach: allocations() -->
            <tr>
                <td><input type="checkbox" data-bind="click: () => { checked(!checked()); return true; }, checked: checked()" /></td>
                <td><span data-bind="text: reqNo"></span></td>
                <td style="text-align: left; overflow: hidden" data-bind="html: description"></td>
                <td><input type="number" class="form-control" data-bind="value: qtyAlloc" onclick="select()" /></td>
            </tr>
            <!-- /ko -->
        </tbody>
    </table>
    <div class="form-group saveBtn">
        <button class="btn btn-primary" data-bind="click: () => $root.save()"><span class="saveBtn">Save  </span><span class="saveSpn" style="display:none;">Saving... </span><span class="spinner-border spinner-border-sm saveSpn" role="status" aria-hidden="true" style="vertical-align: middle; display:none;"></span></button>
    </div>
</div>


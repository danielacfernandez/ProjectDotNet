@using ServiceTRAX.Identity
@using ServiceTRAX.Identity.Authorization
@model ServiceTRAX.Models.ViewModels.ServiceTRAXPageViewModel
@using ServiceTRAX.Models.DBModels
@inject Microsoft.Extensions.Options.IOptions<SiteConfiguration> SiteConfig

@{
    string SetActiveClassOnAction(string ControllerName)
    {
        return ViewContext.RouteData.Values["Controller"].ToString().Equals(ControllerName, StringComparison.OrdinalIgnoreCase) ? " active " : string.Empty;
    }

    async Task RenderOrganizationSelectOptions()
    {
        foreach (UserOrganization org in ViewBag.Orgs)
        {
            if (org.OrganizationId == Model.OrganizationID)
            {
                <option value="@org.OrganizationId.ToString()" selected="selected">@org.OrganizationName</option>
            }
            else
            {
                <option value="@org.OrganizationId.ToString()">@org.OrganizationName</option>
            }
        }
    }

    var @home = SetActiveClassOnAction("Home");
    var @search = SetActiveClassOnAction("Search");
    //var @crm = SetActiveClassOnAction("asd");
    var @quoting = SetActiveClassOnAction("QuoteRequest");
    var @quoterequests = SetActiveClassOnAction("QuoteRequest");
    var @scheduler = SetActiveClassOnAction("Scheduler");
    var @billing = SetActiveClassOnAction("Billing");

}


<nav class="main-subnav navbar navbar-expand-lg navbar-light bg-light">
    <a class="home-button @home d-none d-lg-block" href="@Url.Action("Index", "Home", new { OrganizationID = Model.OrganizationID })">
        <i class="fas fa-home"></i>
    </a>
    <button class="navbar-toggler d-none" type="button" data-toggle="collapse" data-target="#main-subnav__left" aria-controls="main-subnav__left" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="main-subnav__left">
        <ul class="navbar-nav mr-auto main-subnav-list">

            @*<li>
                <a class="dropdown-item d-lg-none" href="@Url.Action("Index", "Home", new { OrganizationID = Model.OrganizationID } )"><small>Home</small></a>
            </li>*@

            <li class="nav-item dropdown d-lg-none" >
                <div class="d-flex flex">
                    <a class="home-button @home d-lg-none" href="@Url.Action("Index", "Home", new { OrganizationID = Model.OrganizationID })" style="align-self: center;">
                        <i class="fas fa-home"></i>
                    </a>

                    <div class="meta p-3">
                        <select class="selectpicker"
                                id="organizationQuickChange-mobile"
                                data-style="shadow-sm btn-sm btn-white"
                                data-size="10"
                                data-width="auto"
                                data-none-selected-text="...">

                            @{ await RenderOrganizationSelectOptions(); }

                        </select>
                    </div>
                </div>            </li>

            @if (User.UserHasAnyPermission(new Permissions[] { Permissions.QuoteRead, Permissions.QuoteRequestRead, Permissions.QuoteRequestCreate }))
            {
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle @quoting" data-toggle="dropdown" href="#"><small>QUOTING</small></a>
                    <div class="dropdown-menu">

                            @if (User.UserHasThisPermission(Permissions.QuoteRequestCreate))
                            {
                                <a class="dropdown-item" href="@Url.Action("Index", "Request", new { OrganizationID = Model.OrganizationID, IsNew = true })"><small>NEW QUOTE REQUEST</small></a>
                            }
                            @if (User.UserHasThisPermission(Permissions.QuoteRequestRead))
                            {
                            <a class="dropdown-item" href="@Url.Action("ListQRs", "Request", new { OrganizationID = Model.OrganizationID })"><small>VIEW QUOTE REQUESTS</small></a>
                            }
                        @if (User.UserHasAllThisPermission(new Permissions[] { Permissions.QuoteRead, Permissions.QuoteRequestRead }))
                        {
                            <div class="dropdown-divider"></div>
                        }
                        @if (User.UserHasAllThisPermission(new Permissions[] { Permissions.QuoteRead }))
                        {
                        <a class="dropdown-item" href="@Url.Action("ListQuotes", "Quote", new { OrganizationID = Model.OrganizationID })"><small>VIEW QUOTES</small></a>
                        }
                        </div>
                </li>
            }
            @if (User.UserHasAnyPermission(new Permissions[] { Permissions.ServiceRequestList, Permissions.MACServiceRequestList, Permissions.ServiceRequestCreateUpdateSetPunch, Permissions.MACServiceRequestCreateUpdateClose }))
            {
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#"><small>JOBS</small></a>
                    <div class="dropdown-menu">
                        @if (User.UserHasAnyPermission(new Permissions[] { Permissions.ServiceRequestCreateUpdateSetPunch, Permissions.MACServiceRequestCreateUpdateClose }))
                        {
                            <a class="dropdown-item" href="@Url.Action("Index", "Request", new { OrganizationID = Model.OrganizationID, IsNew = true, IsSR = true })"><small>NEW SERVICE REQUEST</small></a>
                        }
                        <a class="dropdown-item"
                           requires-permission="@Permissions.ServiceRequestList"
                           asp-action="ListSRs" asp-controller="Request" asp-route-OrganizationID="@Model.OrganizationID"><small>VIEW SERVICE REQUESTS</small></a>
                        @if (User.UserHasAnyPermission(new Permissions[] { Permissions.MACServiceRequestList, Permissions.MACServiceRequestAssignedResourcesList }))
                        {
                            <div class="dropdown-divider"></div>
                        }
                        <a class="dropdown-item"
                           requires-permission="@Permissions.MACServiceRequestList"
                           asp-action="ListServiceAccountJobs"
                           asp-controller="Request" asp-route-OrganizationID="@Model.OrganizationID"><small>VIEW SVC ACCT JOBS</small></a>
                        <a class="dropdown-item"
                           requires-permission="@Permissions.MACServiceRequestAssignedResourcesList"
                           asp-action="SvcAcctJobsAssignedResources"
                           asp-controller="Request" asp-route-OrganizationID="@Model.OrganizationID"><small>SVC ACCT ASSIGNED RESOURCES</small></a>
                    </div>
                </li>
            }
            @if (User.UserHasAnyPermission(new Permissions[] { Permissions.SchedulerDayRead, Permissions.SchedulerMonthlyReadSummary, Permissions.SchedulerMonthlyReadDetails }))
            {
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#"><small>SCHEDULING</small></a>
                    <div class="dropdown-menu">
                        <a class="dropdown-item d-none d-lg-block" requires-permission="@Permissions.SchedulerDayRead" href="@Url.Action("Daily", "Scheduler", new { OrganizationID = Model.OrganizationID })"><small>DAILY</small></a>
                        <a class="dropdown-item d-lg-none" requires-permission="@Permissions.SchedulerDayRead" href="@Url.Action("Daily", "Scheduler", new { OrganizationID = Model.OrganizationID, IsMobileView = true })"><small>DAILY (Mobile)</small></a>
                        @if (User.UserHasAnyPermission(new Permissions[] { Permissions.SchedulerMonthlyReadSummary, Permissions.SchedulerMonthlyReadDetails }))
                        {
                            <a class="dropdown-item" href="@Url.Action("Monthly", "Scheduler", new { OrganizationID = Model.OrganizationID })"><small>MONTHLY</small></a>
                        }
                        @if (User.UserHasThisPermission(Permissions.SchedulerResourcesGeneralGrids))
                        {
                            <div class="dropdown-divider d-none d-lg-block"></div>
                            <a class="dropdown-item d-none d-lg-block" href="@Url.Action("WeekDayResources", "Scheduler", new { OrganizationID = Model.OrganizationID })"><small>RESOURCES BY WEEKDAY</small></a>
                            <a class="dropdown-item d-none d-lg-block" href="@Url.Action("PerDateResources", "Scheduler", new { OrganizationID = Model.OrganizationID })"><small>RESOURCES PER DATE</small></a>
                        }
                    </div>
                </li>
            }

            @if (User.UserHasAnyPermission(new Permissions[] {   Permissions.TimeEntryJobCrewRead,
                                                                 Permissions.TimeEntryJobPersonalClockInClockOut,
                                                                 Permissions.TimeEntrySvcAcctCrewRead,
                                                                 Permissions.TimeEntrySvcAcctPersonalClockInClockOut,
                                                                 Permissions.ApproveMyWeekPersonalApproveReject,
                                                                 Permissions.ApproveMyWeekProxyApproveReject,
                                                                 Permissions.TimeEntryBulkEnterTime}))
            {
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#"><small>TIME ENTRY</small></a>
                    <div class="dropdown-menu">
                        @if (User.UserHasAnyPermission(new Permissions[] { Permissions.TimeEntryJobCrewRead, Permissions.TimeEntryJobPersonalClockInClockOut }))
                        {
                            <a class="dropdown-item" href="@Url.Action("Job", "TimeEntry", new { OrganizationID = Model.OrganizationID })"><small>JOB TIME ENTRY</small></a>
                        }
                        @if (User.UserHasAnyPermission(new Permissions[] { Permissions.TimeEntrySvcAcctCrewRead, Permissions.TimeEntrySvcAcctPersonalClockInClockOut }))
                        {
                            <a class="dropdown-item" href="@Url.Action("ServiceAccount", "TimeEntry", new { OrganizationID = Model.OrganizationID })"><small>SERVICE ACCOUNT TIME ENTRY</small></a>
                        }
                        <a class="dropdown-item  d-none d-lg-block"
                           requires-permission="TimeEntryBulkEnterTime"
                           asp-controller="TimeEntry" asp-action="BulkTimeEntry" asp-route-organizationid="@Model.OrganizationID">
                            <small>BULK TIME ENTRY</small>
                        </a>
                        <a class="dropdown-item  d-none d-lg-block"
                           requires-permission="ExpensesViewEditCreate"
                           asp-controller="TimeEntry" asp-action="Expenses" asp-route-organizationid="@Model.OrganizationID">
                            <small>EXPENSES</small>
                        </a>

                        @if (User.UserHasAnyPermission(new Permissions[] { Permissions.ApproveMyWeekProxyApproveReject, Permissions.ApproveMyWeekPersonalApproveReject }))
                        {
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="@Url.Action("Approval", "TimeEntry", new { OrganizationID = Model.OrganizationID })"><small>APPROVE MY TIME</small></a>
                        }
                        
                    </div>
                </li>
            }

            @if (User.UserHasAnyPermission(new Permissions[] { Permissions.BillingInvoicesReadCreateSend, Permissions.BillingPooledHours, Permissions.BillingSentInvoices, Permissions.BillingACIInvoices }))
            {
                <li class="nav-item dropdown d-none d-lg-block">
                    <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#"><small>BILLING</small></a>
                    <div class="dropdown-menu">
                        @if (User.UserHasThisPermission(Permissions.BillingInvoicesReadCreateSend))
                        {
                            <a class="dropdown-item" href="@Url.Action("Open", "Billing", new { OrganizationID = Model.OrganizationID })"><small>OPEN</small></a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="@Url.Action("InvoicesOpen", "Billing", new { OrganizationID = Model.OrganizationID })"><small>INVOICES OPEN</small></a>
                        }
                        @if (User.UserHasAnyPermission(new Permissions[] { Permissions.BillingInvoicesReadCreateSend, Permissions.BillingSentInvoices }))
                        {
                            // Names for "Sent" and "Invoiced" were changed based on comments on this task: https://dev.azure.com/EIT2020/Omni%20Portal/_workitems/edit/8550/
                            <a class="dropdown-item" href="@Url.Action("InvoicesSent", "Billing", new { OrganizationID = Model.OrganizationID })"><small>INVOICES PENDING</small></a>
                        }
                        @*@if (User.UserHasThisPermission(Permissions.BillingInvoicesReadCreateSend))
        {
            <a class="dropdown-item" href="@Url.Action("InvoicesComplete", "Billing", new { OrganizationID = Model.OrganizationID })"><small>INVOICES COMPLETE</small></a>
        }*@
                        @if (User.UserHasThisPermission(Permissions.BillingInvoicesReadCreateSend))
                        {
                            <a class="dropdown-item" href="@Url.Action("InvoicesInvoiced", "Billing", new { OrganizationID = Model.OrganizationID })"><small>INVOICES INVOICED</small></a>
                        }
                        @if (User.UserHasThisPermission(Permissions.BillingACIInvoices))
                        {
                            <a class="dropdown-item" href="@Url.Action("ACIInvoices", "Billing", new { OrganizationID = Model.OrganizationID })"><small>INVOICES</small></a>
                        }

                        @if (User.UserHasAllThisPermission(new Permissions[] { Permissions.BillingInvoicesReadCreateSend, Permissions.BillingPooledHours }))
                        {
                            <div class="dropdown-divider"></div>
                        }
                        <a class="dropdown-item" requires-permission="@Permissions.BillingPooledHours" href="@Url.Action("PooledHours", "Billing", new { OrganizationID = Model.OrganizationID })"><small>POOLED HOURS</small></a>
                        <a class="dropdown-item" requires-permission="@Permissions.PayrollReadApprove" href="@Url.Action("Payroll", "Billing", new { OrganizationID = Model.OrganizationID })"><small>PAYROLL</small></a>
                        <a class="dropdown-item" requires-permission="@Permissions.PayrollReadApprove" href="@Url.Action("ADPExpenseReport", "Billing", new { OrganizationID = Model.OrganizationID })"><small>ADP EXPENSE REPORT</small></a>
                        @*<div requires-permission="ExpensesViewEditCreate" class="dropdown-divider"></div>
        <a class="dropdown-item  d-none d-lg-block"
           requires-permission="ExpensesViewEditCreate"
           asp-controller="TimeEntry" asp-action="Expenses" asp-route-organizationid="@Model.OrganizationID">
            <small>EXPENSES</small>
        </a>*@
                        @if (User.UserHasThisPermission(Permissions.BillingExportToGP))
                        {
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="@SiteConfig.Value.ExternalBillingSiteBaseUrl" target="_blank"><small>EXPORT TO GP</small></a>
                        }
                         @if (User.UserHasThisPermission(Permissions.BillingTimeEntry))
                        {
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="@Url.Action("TimeEntryMember", "TimeEntry", new { OrganizationID = Model.OrganizationID })"><small>TIME ENTRY</small></a>
                        }
                    </div>
                </li>
            }

            @if (User.UserHasThisPermission(Permissions.AdminAllScreens))
            {
                <li class="nav-item dropdown d-none d-lg-block">
                    <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#"><small>ADMIN</small></a>
                    <div class="dropdown-menu">
                        <a class="dropdown-item" href="@Url.Action("Users", "Account", new { OrganizationID = Model.OrganizationID })"><small>USERS</small></a>
                        <a class="dropdown-item" asp-action="JobHeaders" asp-controller="Admin" asp-route-organizationid="@Model.OrganizationID"><small>JOB HEADERS</small></a>
                        <a class="dropdown-item" href="@Url.Action("DeliveryConditions", "Admin", new { OrganizationID = Model.OrganizationID })"><small>JOB LOCATIONS</small></a>
                        <a class="dropdown-item" asp-action="Contacts" asp-controller="Admin" asp-route-organizationid="@Model.OrganizationID"><small>CONTACTS</small></a>
                        <a class="dropdown-item" asp-action="Customers" asp-controller="Admin" asp-route-organizationid="@Model.OrganizationID"><small>CUSTOMERS</small></a>
                        <a class="dropdown-item" asp-action="Resources" asp-controller="Admin" asp-route-organizationid="@Model.OrganizationID"><small>RESOURCES</small></a>
                        <a class="dropdown-item" asp-action="LocalServiceProvider" asp-controller="Admin" asp-route-organizationid="@Model.OrganizationID"><small>LOCAL SERVICE PROVIDER</small></a>
                        <a class="dropdown-item" asp-action="Skills" asp-controller="Admin" asp-route-organizationid="@Model.OrganizationID"><small>SKILLS</small></a>
                        <a class="dropdown-item" asp-action="Widgets" asp-controller="Admin" asp-route-organizationid="@Model.OrganizationID"><small>WIDGETS</small></a>
                        <a class="dropdown-item" asp-action="HomePageMessages" asp-controller="Admin" asp-route-organizationid="@Model.OrganizationID"><small>HOME PAGE MESSAGES</small></a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="@Url.Action("Permissions", "Account", new { OrganizationID = Model.OrganizationID })"><small>PERMISSIONS</small></a>
                        <a class="dropdown-item" requires-permission="@Permissions.AdminAllScreens" asp-controller="Admin" asp-action="LogIndex" asp-route-organizationid="@Model.OrganizationID"><small>SYSTEM LOGS</small></a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" asp-action="MACWorkCodeRate" asp-controller="Admin" asp-route-organizationid="@Model.OrganizationID"><small>MAC WORK CODE RATE</small></a>
                        <a class="dropdown-item" asp-action="MACActivityRate" asp-controller="Admin" asp-route-organizationid="@Model.OrganizationID"><small>MAC ACTIVITY TYPE RATE</small></a>
                        <a class="dropdown-item" asp-action="MACReportConfig" asp-controller="Admin" asp-route-organizationid="@Model.OrganizationID"><small>MAC REPORT CONFIG</small></a>
                    </div>
                </li>
            }
            @if (User.UserHasThisPermission(Permissions.ReportingMenuEntry))
            {
                <li class="nav-item dropdown d-none d-lg-block">
                    <a class="nav-link d-none d-lg-block" href="@Url.Action("RedirectToMxB", "Home", new { OrganizationID = Model.OrganizationID })" target="_blank">
                        <small>REPORTS (MxB)</small>
                    </a>
                </li>
            }
        </ul>

        @if (ViewContext.RouteData.Values["Controller"].ToString().Equals("Home", StringComparison.OrdinalIgnoreCase))
        {
            <ul class="navbar-nav">
                <li class="nav-item">
                    <button type="button" class="btn btn-sm btn-primary mr-3" id="manageWidgetsButton">
                        <small><i class="fas fa-cog"></i> MANAGE WIDGETS</small>
                    </button>
                </li>
            </ul>
        }
    </div>
    <div id="searchToggleButton" class="home-button @search d-none d-lg-block" style="cursor:pointer" onclick="showSearchDialog()">
        <i class="fas fa-search" ></i>
    </div>
</nav>




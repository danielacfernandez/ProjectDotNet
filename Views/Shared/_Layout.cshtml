@model ServiceTRAX.Models.ViewModels.ServiceTRAXPageViewModel;

@inject Microsoft.Extensions.Options.IOptions<SiteConfiguration> Configuration
@inject ServiceTRAX.Data.ServiceTRAXData _data;

@using ServiceTRAX.Identity
@using ServiceTRAX.Models.DBModels

@functions {
    async Task RenderOrganizationSelectOptions()
    {
        foreach (UserOrganization org in ViewBag.Orgs)
        {
            if (org.OrganizationId == Model.OrganizationID)
            {
                <option value="@org.OrganizationId.ToString()" selected="selected">@org.OrganizationName</option>
            }
            else
            {
                <option value="@org.OrganizationId.ToString()">@org.OrganizationName</option>
            }
        }
    }


    string HeaderColor()
    {
        switch (Model.OrganizationID)
        {
            //case 2: return "background-color: #138D75!important;";
            //case 4: return "background-color: #2E86C1!important;";
            //case 8: return "background-color: #CD6155!important;";
            //case 10: return "background-color: #A569BD!important;";
            //case 11: return "background-color: #E9967A!important;";
            //case 12: return "background-color: #B22222!important;";
            //case 14: return "background-color: #34495E!important;";
            //case 15: return "background-color: #DB7093!important;";
            //case 16: return "background-color: #FF6347!important;";
            //case 17: return "background-color: #BDB76B!important;";
            //case 20: return "background-color: #6A5ACD!important;";
            //case 21: return "background-color: #228B22!important;";

            default: return string.Empty;
        }
    }

}
@{
    string SetActiveClassOnAction(string ControllerName)
    {
        return ViewContext.RouteData.Values["Controller"].ToString().Equals(ControllerName, StringComparison.OrdinalIgnoreCase) ? " active " : string.Empty;
    }

    var @home = SetActiveClassOnAction("Home");
    var @search = SetActiveClassOnAction("Search");
    var @crm = SetActiveClassOnAction("asd");
    var @quoting = SetActiveClassOnAction("QuoteRequest");
    var @quoterequests = SetActiveClassOnAction("QuoteRequest");
    var @scheduler = SetActiveClassOnAction("Scheduler");
    var @billing = SetActiveClassOnAction("Billing");

    ViewBag.Orgs = await _data.AspNetUserOrganizations_Select(User.GetUserID());
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no" />
    <title>@ViewData["Title"] - ServiceTRAX</title>

    <link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/main.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/override/main-custom.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/all.min.css" />
    <link rel="stylesheet" href="~/lib/bootstrap-select/bootstrap-select.min.css" />

    @RenderSection("StyleSheets", false)
</head>
<body>

    @if (User.Identity.IsAuthenticated)
    {
        <div id="globalErrorHandler" style=" color: red;
        background-color: rgba(255, 255, 74, 0.5);
        display: none;
        position: fixed;
        z-index: 30000;
        padding: 25px;
        margin: 20px;
        border-radius: 20px;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%); ">
            <div class="d-flex flex-row">
                <i class="fas fa-exclamation-triangle fa-5x pr-2"></i>
                <textarea id="globalErrorHandlerList" rows="10" style="width:400px" readonly></textarea>
            </div>
        </div>

        <header class="sticky-top">
            <nav class="main-nav navbar navbar-absolute navbar-dark bg-primary" style="@HeaderColor()">
                <div class="container-fluid">
                    <div class="row flex-grow-1">
                        @if (!string.IsNullOrEmpty(Configuration.Value.HeaderBannerMessage))
                        {
                            <div class="col-auto" style="position:relative">
                                <div class="col-12 d-lg-none mobile-header-banner">
                                    <div class="@Configuration.Value.HeaderBannerMessageStyle" role="alert">
                                        @Html.Raw(Configuration.Value.HeaderBannerMessage)
                                    </div>
                                </div>
                                <a class="navbar-brand" href="/">
                                    <img src="~/img/logo.png" alt="ServiceTrax">
                                </a>
                            </div>
                            <div class="col-auto d-none d-lg-block">
                                <div class="@Configuration.Value.HeaderBannerMessageStyle" role="alert">
                                    @Html.Raw(Configuration.Value.HeaderBannerMessage)
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="col-auto">
                                <a class="navbar-brand" href="/">
                                    <img src="~/img/logo.png" alt="ServiceTrax">
                                </a>
                            </div>
                        }
                        <div class="col-auto d-none d-lg-block ml-auto">
                            <ul class="navbar-nav profile">
                                <li class="nav-item">
                                    <div class="row">
                                        <div class="col-auto p-0" data-toggle="dropdown">
                                            <img src="~/UserPhotos/@User.Identity.UserPhoto()" class="avatarfix" alt="Avatar">
                                        </div>
                                        <div class="col d-none d-sm-block">
                                            <div class="btn-group">
                                                <a href="#" data-toggle="dropdown" id="dropdownUserAction" class="nav-link dropdown-toggle user-action" aria-haspopup="true" aria-expanded="false">
                                                    @User.Identity.FullName()
                                                </a>
                                                <ul class="dropdown-menu" id="dropdownUserAction">
                                                    <li>
                                                        <a class="dropdown-item" asp-controller="Account" asp-action="UserProfile" asp-route-organizationid="@Model.OrganizationID">
                                                            <i class="far fa-user"></i>
                                                            Profile
                                                        </a>
                                                    </li>
                                                    <li class="divider dropdown-divider"></li>
                                                    <li>
                                                        @using (Html.BeginForm("Logout", "Account", FormMethod.Post, new { id = "logoutForm" }))
                                                        {
                                                            @Html.AntiForgeryToken()
                                                            <a href="javascript:document.getElementById('logoutForm').submit()" class="dropdown-item">
                                                                <i class="fas fa-sign-out-alt"></i>
                                                                Logout
                                                            </a>
                                                        }
                                                    </li>
                                                </ul>
                                            </div>

                                            <div class="meta">
                                                <select class="selectpicker"
                                                    id="organizationQuickChange-desktop"
                                                    data-style="shadow-sm btn-sm btn-white"
                                                    data-size="10"
                                                    data-width="auto"
                                                    data-none-selected-text="...">

                                                    @{
                                                        await RenderOrganizationSelectOptions();
                                                    }

                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>

                    <!----------------Mobile Options----------------->
                <ul class="nav mobile-options d-lg-none align-items-center">
                        <li class="nav-item dropdown">
                            <div class="avatar" id="dropdownUserAction" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <img src="~/UserPhotos/@User.Identity.UserPhoto()" alt="Avatar">
                            </div>
                            <ul class="dropdown-menu dropdown-menu-right" id="dropdownUserAction" style="z-index:10000">
                                <li>
                                    <a class="dropdown-item" asp-controller="Account" asp-action="UserProfile" asp-route-organizationid="@Model.OrganizationID">
                                        <i class="far fa-user"></i>
                                        Profile
                                    </a>
                                </li>
                                <li class="divider dropdown-divider"></li>
                                <li>
                                    @using (Html.BeginForm("Logout", "Account", FormMethod.Post, new { id = "logoutForm2" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        <a href="javascript:document.getElementById('logoutForm2').submit()" class="dropdown-item">
                                            <i class="fas fa-sign-out-alt"></i>
                                            Logout
                                        </a>
                                    }
                                </li>
                            </ul>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @search" href="@Url.Action("Index", "Search", new { OrganizationID = Model.OrganizationID })">
                                <i class="fas fa-search"></i>
                            </a>
                        </li>
                        <li class="nav-item">
                            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#main-subnav__left" aria-controls="main-subnav__left" aria-expanded="false" aria-label="Toggle navigation">
                                <span class="navbar-toggler-icon"></span>
                            </button>
                        </li>
                    </ul>
                </div>
            </nav>
            @await Html.PartialAsync("_MainMenu.cshtml")
            @RenderSection("SubMenu", required: false)
        </header>
    }
    <div>
        <div class="container-fluid">
            <main role="main" class="pb-3">
                @RenderBody()
            </main>
        </div>

        <footer class="border-top footer text-muted">
            <div class="container">
                <div class="row">
                    <div class="col text-right">
                        &copy; 2020 - ServiceTRAX
                    </div>
                </div>
            </div>
        </footer>
    </div>

    <script src="~/lib/jquery/jquery.min.js"></script>
    <script src="~/lib/jquery-ui/jquery-ui.min.js"></script>

    @await Html.PartialAsync("_SearchDialog.cshtml")
   

    @if (Configuration.Value.GlobalJavascriptErrorHanderEnabled)
    {
        <script>
            // General error handler
            window.addEventListener("error", handleGlobalError, true);
            window.addEventListener('unhandledrejection', handleGlobalError, true);

            function handleGlobalError(evt) {

                // If the error is image load failure (404) then ignore the error - Missing avatars were causing this issue
                if (evt.srcElement.localName === 'img') {
                    return;
                }
                // Ignore errors on Bootstrap Select JS component
                if (evt.filename && evt.filename.toLowerCase().endsWith('bootstrap-select.min.js')) {
                    console.log('Bootstrap Select error:', evt.message);
                    return;
                }

                // Show the error dialog
                document.getElementById('globalErrorHandler').style.display = 'unset';

                // Find the error type and complete the information in the error dialog
                if (evt.type && evt.type === 'unhandledrejection') {
                    document.getElementById('globalErrorHandlerList').value += `Unhandled rejection (promise: ${evt.promise}, reason: ${evt.reason}).`;
                } else if (evt.message) { // Chrome sometimes provides this
                    document.getElementById('globalErrorHandlerList').value += "error: " + evt.message + " at linenumber: " + evt.lineno + " of file: " + evt.filename;
                } else {
                    document.getElementById('globalErrorHandlerList').value += "error: " + evt.type + " from element: " + (evt.srcElement || evt.target)
                }
            }

        </script>
    }

    <script type="text/javascript">
        $(document).ready(function () {
            $('#organizationQuickChange-mobile, #organizationQuickChange-desktop').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
                let newOrg = { 'OrganizationID': parseInt($(this).val()) };
                postWrapper('/api/v1/organizationswitch', JSON.stringify(newOrg))
                    .then(r => redirectToPage('/', newOrg));
            });

            draggableSearchWindow();
        });


        redirectToPage = function (url, params = {}, newtab = false) {
            let paramsStr = Object.keys(params).filter(k => params[k] !== null && params[k] !== '').map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k])).join('&');

            if (newtab) {
                var open_link = window.open('', '_blank');
                open_link.location = paramsStr.length > 0 ? `${url}?${paramsStr}` : url;
            }
            else {
                window.location = paramsStr.length > 0 ? `${url}?${paramsStr}` : url;
            }
        }

        getWrapper = function (url, params = {}) {

            let paramsStr = Object.keys(params).filter(k => params[k] !== null && params[k] !== '').map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k])).join('&');
            let query = paramsStr.length > 0 ? `${url}?${paramsStr}` : url;
            //console.log('Fetching ', query);

            return fetch(query,
                {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                }).then(res => res.json())
                .catch(error => {
                    console.log('Error:', error);
                });
        }

        postWrapper = function (url, body) {
            return fetch(url,
                {
                    method: 'POST',
                    body: body,
                    headers: { 'Content-Type': 'application/json' }
                }).then(res => res.json())
                .catch(error => console.log('Error:', error));
        }

   


    </script>

    @RenderSection("Scripts", required: false)

    <script src="~/lib/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/bootstrap-select/bootstrap-select.min.js"></script>

</body>
</html>

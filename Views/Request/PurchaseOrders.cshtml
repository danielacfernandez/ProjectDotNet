@model ServiceTRAX.Models.ViewModels.ServiceTRAXPurchaseOrdersViewModel
@using ServiceTRAX.Models.API 

@{
    ViewData["Title"] = "Purchase Orders";
}

@section SubMenu {
    @await Component.InvokeAsync("SideMenu", new SideMenuData { OrganizationID = Model.OrganizationID, ProjectID = Model.ProjectID, RequestID = Model.RequestID, UserID=Model.UserID  })
}


@section StyleSheets {

    <style>
        .gridContent {
            position: absolute;
            border: solid 1px #c0c0c0;
            left: 20px;
            top: 170px;
            right: 20px;
            bottom: 70px;
        }

        .popupWindow {
            opacity: 1;
            position: absolute;
            left: 50px;
            top: 50px;
            right: 50px;
            bottom: 50px;
            width: auto;
            border: solid 1px #c0c0c0;
            border-radius: 5px;
            background-color: #FFFFFF;
            z-index: 1020;
        }
    </style>

    <link rel="stylesheet" href="~/css/mygrid.1.0.css">
    <link rel="stylesheet" href="~/css/datepicker.css" />
    <link rel="stylesheet" href="~/lib/trumbowyg/trumbowyg.min.css" />
}

@section Scripts {


@*    <script language="javascript" type="text/javascript" src="~/lib/mygrid.1.0.js?1"></script>
    <script type='text/javascript' src='~/override/main-custom.js'></script>
    <script type='text/javascript' src='~/lib/datepicker.js'></script>
    <script type='text/javascript' src='~/lib/trumbowyg/trumbowyg.min.js'></script>
    <script type='text/javascript' src='~/lib/knockout/knockout-latest.js'></script>
    <script type='text/javascript' src='~/lib/knockout.validation/knockout.validation.min.js'></script>
    <script type='text/javascript' src='~/js/ko-bindingHandlers.js'></script>
    <script type='text/javascript' src='~/js/notification-dialog.js'></script>*@

    <script language="javascript" type="text/javascript" src="~/lib/mygrid.1.0.js" asp-append-version="true"></script>
    <script type='text/javascript' src='~/lib/knockout/knockout-latest.js'></script>
    <script type='text/javascript' src='~/lib/moment/moment.min.js'></script>
    <script type='text/javascript' src='~/lib/moment-business-days/index.js'></script>
    <script type='text/javascript' src='~/lib/datepicker.js'></script>
    <script type='text/javascript' src='~/lib/trumbowyg/trumbowyg.min.js'></script>
    <script type='text/javascript' src='~/js/ko-bindingHandlers.js' asp-append-version="true"></script>
    <script type='text/javascript' src='~/lib/knockout.validation/knockout.validation.min.js'></script>
    <script type='text/javascript' src='~/override/main-custom.js'></script>
    <script type="text/javascript" src="~/lib/maskedinput/jquery.maskedinput.js"></script>
    <script type='text/javascript' src='~/js/colored-calendar.js' asp-append-version="true"></script>
    <script type='text/javascript' src='~/js/notification-dialog.js' asp-append-version="true"></script>
    <script type='text/javascript' src='~/lib/compressorjs/compressor.min.js'></script>
    <script language="javascript" type="text/javascript" src="~/lib/server.js" asp-append-version="true"></script>
    
    <style>

    </style>


    <script type="text/javascript">
        $(function () {
            let model = @Html.Raw(Json.Serialize(Model));
            console.log(model);
            model.notificationDialog = notificationDialog;
            model.confirmApproveInvoice = notificationDialog;

            model.uploadInvoiceDialog = {
                isDialogDisplaying: ko.observable(false),
                poID: ko.observable(null),
                amtBalance: 0,
                amount: ko.observable().extend({ required: { message: 'Amount is required.' }, validator:{ min: 1, max: 100 } }),
                invoiceNumber: ko.observable().extend({ required: { message: 'Invoice Number is required.' } }),
                isUploadingInvoice: ko.observable(null),
                invoiceFileName: ko.observable(null).extend({ required: { message: 'File is required.' } }),
                invoiceFile: ko.observable(null).extend({ required: { message: 'File is required.' } }),
                projectID: model.projectID,
                organizationID: model.organizationID,
                requestID: model.requestID,

                invoiceDate: ko.observable(new Date()).extend({ required: { message: 'Date is required.' }}),

                displayDialog: function (POHeaderId, AmtBalance, POStatus) {
                    this.poID(POHeaderId);
                    this.projectID = model.projectID;
                    this.organizationID = model.organizationID;
                    this.requestID = model.requestID;
                    this.amtBalance = AmtBalance;
                    this.validationInvoiceDetails().showAllMessages(false);
                    this.invoiceNumber('');
                    this.amount('');
                    this.invoiceFile(null);
                    this.invoiceDate(new Date());
                    console.log(this.projectID);
                    console.log(this.organizationID);
                    console.log(this.requestID);
                    if (POStatus == "Closed") {
                        this.isDialogDisplaying(false);
                        model.notificationDialog.displayDialog('PO Status', 'The Purchase Order is Closed');
                    }
                    else {
                        if (this.amtBalance <= 0) {
                            this.isDialogDisplaying(false);
                            model.notificationDialog.displayDialog('Balance', 'There are no dollar left for this PO');
                        }
                        else {
                            this.isUploadingInvoice(true);
                            this.isDialogDisplaying(true);
                        }
                    }
                },
                closeDialog: function () {
                    this.isDialogDisplaying(false);
                    this.isUploadingInvoice(false);
                },
            
                est_invoice_date_options: function (isReadOnly) {
                    return isReadOnly === false ? { trigger: '#triggerCalendarInvoiceDate' } : {};
                },
                
                validateForm: function(formElement) {
                    this.invoiceFileName(formElement["invoiceFile"].value);

                    var result = this.validationInvoiceDetails();
                    console.log(result());
                    console.log(formElement["invoiceFile"].value);
                    if (result().length > 0) {
                        result.showAllMessages(true);
                        return false;
                    }
                    var invoiceNumber = formElement["invoiceNumber"].value;
                    var amount = formElement["amount"].value;
                    var fileInvoice = formElement["invoiceFile"].value;
                    //var valid = amount.match(/^-?\d*(\.\d+)?$/);
                    var valid = !/^\s*$/.test(amount) && !isNaN(amount);
                    if (valid==true) {
                        if (amount > this.amtBalance) {
                            model.notificationDialog.greyColor(true);
                            model.notificationDialog.displayDialog('Balance', 'This invoice amount exceeds the Purchase Order');
                            return false;
                        }
                    }
                    else {
                        model.notificationDialog.greyColor(true);
                        model.notificationDialog.displayDialog('Invalid Number', 'Put a correct number in the amount field');
                        return false;
                    }
                    this.isDialogDisplaying(false);
                    return true;

                },
                validationInvoiceDetails: function () {
                    //return ko.validation.group(this, { deep: true }
                            return ko.validation.group({
                                f1: this.invoiceNumber,
                                f2: this.invoiceDate,
                                f3: this.amount,
                                f4: this.invoiceFileName
                            }, { deep: true })
                }
                
            };
            model.approveInvoice = function (row) {
                console.log(row);
                let data = {
                    POInvoiceID: row.POINVOICEID,
                    FileName: row.DOCUMENTNAME,
                    OrganizationID: @Model.OrganizationID,
                    MDFileName: row.MDFILENAME,
                    Total: row.AMOUNT
                };

                postWrapper('/api/v1/approvepoinvoice', ko.toJSON(data))
                    .then(() => {
                        var poInvoiceNumber = row.INVOICENUMBER;
                        model.notificationDialog.greyColor(false);
                        model.notificationDialog.displayDialog('InvoiceApproved', 'The invoice '+poInvoiceNumber+' was approved');
                        oGrid.oGridAux.refreshData();

                    });

            };

            let userGridParameters = () => ({ ORGANIZATION_ID: @Model.OrganizationID, USER_ID: @Model.UserID, REQUEST_ID: @Model.RequestID, REQUEST_ID_G: @Model.RequestID, PROJECT_ID: @Model.ProjectID });
            let userGridEvents = {
            afterCreatedNewRecord: function (newDataRow) {
                // Set the Row organizationID value so the filtered dropdowns can work
                newDataRow["ROWORG_ID"] = @Model.OrganizationID;
                newDataRow["PROJECT_ID"] = @Model.ProjectID;
            },
            
            buttonClick: function (btn, row) {
                if (btn.id === 'cmdUpdateInvoice') {
                     console.log(row);
                        model.uploadInvoiceDialog.displayDialog(row.POHEADERID, row.AMTBALANCE, row.POSTATUSCODE);
                };
                if (btn.id === 'cmdApproveInvoice') {
                     if (!model.isAllowedToApprove) 
                     {
                        model.notificationDialog.greyColor(false);
                        model.notificationDialog.displayDialog('Access Denied', 'You are not allowed to Approve an invoice');
                     }
                    else
                    {
                        if (!row.ISAPPROVED) {
                            console.log(row.INVOICENUMBER);
                            model.notificationDialog.greyColor(false);
                           
                                model.confirmApproveInvoice.displayConfirmationDialog('DID YOU DOWNLOAD THE INVOICE TO CONFIRM AMOUNTS MATCH?', `Are you sure you want to approve the invoice ${row.INVOICENUMBER} ?`, () => model.approveInvoice(row));
                        }
                        else {
                            model.notificationDialog.greyColor(false);
                            model.notificationDialog.displayDialog('Invoice Approved', 'This invoice has already been approved.');
                        }
                    }
                };
                if (btn.id === 'cmdDownloadInvoice') {
                        var win = window.open(`/Request/downloadpoinvoicefile/${row.MDFILENAME}`, '_blank');
                        win.focus();
                };
                if (btn.id === 'cmdClosePO') {
                         if (model.isOnlyLSPUser) {
                        model.notificationDialog.greyColor(false);
                        model.notificationDialog.displayDialog('Access Denied', 'You are not allowed to Close the Purchase Order');
                        return false;
                    }
                }
            },
                beforeRenderGrid: function (config) {

                    config.allowUpdate = model.isEnableEdit;
                    config.allowInsert = model.isEnableEdit;
                    if (!model.isEnableEdit) {
                        //config.buttons = [];
                        console.log(config.buttons);

                        $('.cmdNewRecord').hide();
                    }

            }

        };


        let oGrid = new clsMyGrid('PurchaseOrders', document.getElementById('poGrid'), null, userGridEvents, true, userGridParameters());


            //
            // Validations
            //
            ko.validation.init({
                //errorElementClass: 'text-danger',
                errorElementClass: 'requestMissingFieldError',
                errorMessageClass: 'help-block',
                decorateElement: true,
                decorateInputElement: false,
                insertMessages: false
            });

            ko.validation.registerExtenders();


            //
            //
            //
            //ko.bindingHandlers.selectPicker = ServiceTRAXBindingHandlers.selectPicker;
            ko.bindingHandlers.showModal = ServiceTRAXBindingHandlers.showModal;
            ko.bindingHandlers.trumbowyg = ServiceTRAXBindingHandlers.trumbowyg;
            ko.bindingHandlers.datepicker = ServiceTRAXBindingHandlers.datepicker;
            ko.bindingHandlers.beforeUnloadText = ServiceTRAXBindingHandlers.beforeUnloadText;
            ko.bindingHandlers.fileInputSelection = ServiceTRAXBindingHandlers.fileInputSelection;

            ko.applyBindings(model);
        });
    </script>

}

<div class="row">
    <div class="col-12 mt-3">
        <h2>PURCHASE ORDERS</h2>
    </div>
</div>
<div id="content-wrap">
    <div class="gridContent myGrid" id="poGrid"></div>
</div>

<!-- ko with:uploadInvoiceDialog-->
<div class="modal fade modal--forms" id="uploadInvoiceDialog" data-bind="showModal:isDialogDisplaying"
     tabindex="-1" data-backdrop="static" role="dialog" aria-labelledby="NewUserModal" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content modal-content--dark-blue">
            <div class="modal-header pb-0">
                <h5 class="modal-title mr-auto ucase"><em class="fas fa-user-plus mr-2"></em>UPLOAD INVOICE</h5>
                <button type="button" class="btn icon-only" data-bind="click:closeDialog">
                    <em class="fas fa-times"></em>
                </button>
            </div>
            <div class="modal-body pt-2">

                <form method="post" enctype="multipart/form-data" asp-controller="Request" asp-action="uploadInvoice" data-bind="submit: validateForm">
                    <div class="modal-body">

                        <input type="hidden" id="poID" name="poID" data-bind="value: poID" />
                        <input type="hidden" id="organizationID" name="organizationID" data-bind="value: organizationID" />
                        <input type="hidden" id="requestID" name="requestID" data-bind="value: requestID" />
                        <input type="hidden" id="projectID" name="projectID" data-bind="value: projectID" />
                        <div class="form-row mb-3">
                            <div class="col-4">
                                <label for="invoiceNumber">
                                    Invoice #
                                </label>
                                <div class="input-group" >
                                    <input type="text" class="form-control" id="invoiceNumber" name="invoiceNumber" data-bind="value:invoiceNumber" autocomplete="off" />
                                    <div class="help-block invalid-feedback" data-bind="validationMessage: invoiceNumber"></div>
                                </div>
                            </div>


                            <div class="col-8 col-md-8">
                                <label for="invoiceDate">
                                    Date
                                </label>
                                <div class="input-group" id="triggerCalendarInvoiceDate" data-bind="validationElement: invoiceDate" style="z-index:10000">
                                    <input type="text" class="form-control" style="z-index:10000" 
                                           autocomplete="off"
                                           id="invoiceDate" name="invoiceDate"
                                           disabled 
                                           data-bind="datepicker: invoiceDate"@*, datepickerOptions: est_invoice_date_options(false)"
                                           required *@ 
                                           />
                                   @* <div class="input-group-append simulate-button" display="none">
                                        <span class="input-group-text input-group-append-custom">
                                            <i class="fas fa-calendar"></i>
                                        </span>
                                    </div>*@
                                </div>
                                <div class="help-block invalid-feedback" data-bind="validationMessage: invoiceDate"></div>
                            </div>
                        </div>
                        <div class="form-row mb-3">
                            <div class="col-4">
                                <label for="amount">
                                    Amount
                                </label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="amount" name="amount" data-bind="value:amount" autocomplete="off" />
                                    <div class="help-block invalid-feedback" data-bind="validationMessage: amount"></div>
                                </div>
                            </div>
                            <div class="col-8">

                                <label for="invoiceFile">
                                    File
                                    <input type="file" class="form-control" style="margin-top: 8px" id="invoiceFile" name="invoiceFile" aria-label="Invoice file upload">
                                    <span class="file-custom"></span>
                                    <div class="help-block invalid-feedback" data-bind="validationMessage: invoiceFileName"></div>
                                </label>
                            </div>
                        </div>
                    
                    </div>
                    <div class="modal-footer">
                    <div class="row">   
                        <!-- ko if:isUploadingInvoice -->
                        <div class="col-4">
                            <button type="submit" class="btn btn-primary btn-block" databind="click: return validateForm();">
                                SAVE
                            </button>
                        </div>
                        <!-- /ko -->
                        <div class="col-4">
                            <button type="button" class="btn btn-warning btn-block" data-bind="click:closeDialog">CANCEL</button>
                        </div>
                    </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- /ko -->
@await Html.PartialAsync("_NotificationDialog")

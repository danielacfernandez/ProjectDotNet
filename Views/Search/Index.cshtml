@model ServiceTRAX.Models.ViewModels.ServiceTRAXSearchViewModel

@{
    ViewData["Title"] = "Search";
}

@section Scripts {

<link rel="stylesheet" href="~/css/mygrid.1.0.css" asp-append-version="true">
<script language="javascript" type="text/javascript" src="~/lib/mygrid.1.0.js" asp-append-version="true"></script>
<script type='text/javascript' src='~/lib/knockout/knockout-latest.js'></script>
<script type='text/javascript' src='~/js/ko-bindingHandlers.js' asp-append-version="true"></script>
<script type='text/javascript' src='~/override/main-custom.js' asp-append-version="true"></script>

<script type="text/javascript">

    var gridName = 'Search';

    $(function () {

        let searchGridEvents = {
            buttonClick: function (btn, row) {
                if (btn.id === 'OpenSearchScreen') {
                    if (row.RESULTTYPE === 'Job') {
                        // Clear content (just in case another grid was previously loaded - to prevent displaying it for a moment until the new one loads)
                        $('#detailSubGrid').empty();
                        // Create/Load the Details sub grid
                        let detailSubGrid = new clsMyGrid(
                            'ProjectDocuments', 
                            $('#detailSubGrid'), 
                            null, 
                            model.gridEvents, 
                            true, 
                            { 
                                'PROJECT_NO': row.PROJECT_NO, 
                                'USER_ID': model.searchParameters().USER_ID, 
                                'QUOTEREQUESTS': @(Model.QuoteRequests ? "true" : "false"), 
                                'QUOTES': @(Model.Quotes ? "true" : "false"), 
                                'SERVICEREQUESTS': @(Model.ServiceRequests ? "true" : "false"), 
                                'HOTSHEETS': @(Model.HotSheets ? "true" : "false"), 
                                'REPORTDAILYSTATUS': @(Model.ReportDailyStatus ? "true" : "false"), 
                                'RDSEMAILED': @(Model.RDSEmailed ? "true" : "false"), 
                                'PURCHASEORDERS': @(Model.PurchaseOrders ? "true" : "false"), 
                                'FILEATTACHMENTS': @(Model.FileAttachments ? "true" : "false") 
                            }
                        );
                        // Make visible the Details grid div container
                        document.getElementById('detailSubGridModal').style.display = 'unset';
                        // Tell the model that the Details subgrid is open
                        model.isDetailSubGridOpen(true);
                    } else if (row.RESULTTYPE === 'Invoice') {
                        redirectToPage(`/Billing/ByJobInvoice?OrganizationID=${model.organizationID}&JobID=${row.JOB_ID}&InvoiceID=${row.INVOICE_ID}&SelectedTab=UNBILLEDOPS`, {}, true);
                    }
                }
            }
        };

        const model =  @Html.Raw(Json.Serialize(Model));

        model.gridEvents = {
            buttonClick: function (btn, row) {
                if (btn.id === 'cmdOpenDocumentScreen') {
                    switch (row.DOCUMENTTYPE.toLowerCase()) {
                        case 'service request': redirectToPage('/Request', { 'OrganizationID': model.organizationID, 'RequestID': row.REQUEST_ID }, false); break;
                        case 'quote request': redirectToPage('/Request', { 'OrganizationID': model.organizationID, 'RequestID': row.REQUEST_ID }, false); break;
                        case 'quote': redirectToPage('/Quote', { 'OrganizationID': model.organizationID, 'QuoteID': row.RECORD_ID }, false); break;
                        case 'hotsheet': redirectToPage('/Request/HotSheet', { 'OrganizationID': model.organizationID, 'HotSheetID': row.RECORD_ID, 'RequestID': row.REQUEST_ID }, false); break;
                        case 'requestdailystatus': redirectToPage('/TimeEntry/DailyStatusReport', { 'OrganizationID': model.organizationID, 'RequestDailyStatusId': row.RECORD_ID }, false); break;
                        case 'po': redirectToPage('/Quote', { 'OrganizationID': model.organizationID, 'QuoteID': row.RECORD_ID }, false); break;
                        case 'attachment-qr':
                        case 'attachment-sr':
                        case 'attachment-other':
                            redirectToPage(`/ProjectFiles/${row.PROJECT_NO}/${row.REQUEST_ID}/${row.REQUEST_NO}/${row.VERSION_NO}/${row.DESCRIPTION}`, {}, true);
                            break;
                    }
                }
            }
        };

        model.searchFlag = false;
        model.projNameSearchValue = ko.observable(model.projectName);
        model.projNumberSearchValue = ko.observable(model.projectNumber);
        model.endUsers = ko.observableArray(model.endUsers);

        model.endUser = ko.observable(model.endUser);
        model.endUser.subscribe(function (newValue) {
            newValue && model.search();
        });

        model.customers = ko.observableArray(model.customers);
        model.customer = ko.observable(model.customer);
        model.invoiceNo = ko.observable(model.invoiceNumber);
        model.poNo = ko.observable(model.poNumber);
        model.hbQuoteNo = ko.observable(model.hbQuote);

        model.customer.subscribe(function (newValue) {
            model.endUsers([]);
            let filteredCusts = model.customers().filter(cust => cust.customer_Name === newValue)[0];
            var custID = filteredCusts ? filteredCusts.customer_Id : null;

            getWrapper('/api/v1/endusers', { 'OrganizationID': model.organizationID, 'CustomerID': custID })
                .then((response) => {
                    model.endUsers(response.value);
                    model.endUser(null);
                    // Trigger a search if something was selected
                    newValue && model.search();
                });
        })

        model.clear = function () {
            model.customer(null);
            model.endUser(null);
            model.projNumberSearchValue('');
            model.projNameSearchValue('');
            model.invoiceNo('');
            model.poNo('');
            model.hbQuoteNo('');
            // Perform a search after clearing
            model.search();
        }

        function makeSearchExpression(value) {
            const unwrappedValue = ko.unwrap(value);
            return unwrappedValue ? `%${unwrappedValue}%` : null;
        }

        model.searchParameters = function () {
            console.log('end user', model.endUser, model.endUser());
            return {
                ORGANIZATION_ID: model.organizationID,
                USER_ID: model.userID,
                PROJECT_NO: makeSearchExpression(model.projNumberSearchValue),
                PROJECT_NAME: makeSearchExpression(model.projNameSearchValue),
                CUSTOMER_NAME: makeSearchExpression(model.customer),
                END_USER: makeSearchExpression(model.endUser),
                INVOICE_NO: makeSearchExpression(model.invoiceNo),
                PO_NO: makeSearchExpression(model.poNo),
                HBQUOTE_NO: makeSearchExpression(model.hbQuoteNo)
            }
        }

        model.search = function () {
            oGrid.reset(gridName, searchGridEvents, model.searchParameters());
        }

        model.searchOnEnter = function (d,e) {
            e.keyCode === 13 && model.search();
            return true;
        }

        //
        // Detail SubGrid
        //
        model.isDetailSubGridOpen = ko.observable(false);
        model.closeSubGrid = function () {
            document.getElementById('detailSubGridModal').style.display = 'none';
            model.isDetailSubGridOpen(false);
        }

        ko.bindingHandlers.selectPicker = ServiceTRAXBindingHandlers.selectPicker;
        ko.applyBindings(model);

        const oGrid = new clsMyGrid(gridName, document.getElementById('searchTEG'), null, searchGridEvents, true, model.searchParameters());

        document.getElementById("prj-num-input").focus();
    });

</script>
}

@section StyleSheets {

<style>

    @@media (max-width: 768px) {
        .gridContent {
            position: absolute;
            border: solid 1px #c0c0c0;
            left: 20px;
            top: 410px;
            right: 20px;
            bottom: 30px;
        }
    }

    @@media (min-width: 768px) {
        .gridContent {
            position: absolute;
            border: solid 1px #c0c0c0;
            left: 20px;
            top: 200px;
            right: 20px;
            bottom: 30px;
        }
    }

    .detailSubGridModalClass {
        position: absolute;
        background-color: rgba(0, 0, 0, 0.4);
        left: 0px;
        top: 0px;
        right: 0px;
        bottom: 0px;
        z-index: 1;
    }

    .detailSubGridModalBodyClass {
        position: absolute;
        border-radius: 5px;
        border: solid 2px #2d5daf;
        background-color: rgba(45, 93, 175, 0.50);
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
        left: 30px;
        top: 185px;
        right: 30px;
        bottom: 60px;
        z-index: 1;
    }

    .detailSubGridClass {
        position: absolute;
        left: 2px;
        top: 2px;
        right: 2px;
        bottom: 2px;
    }

    .detailSubGridCloseClass {
        text-align: center;
        padding: 15px;
        border-radius: 5px;
        border: 2px solid #aaa;
        background-color: rgba(45, 93, 175, 0.15);
        width: 25%;
        margin: auto;
        margin-top: 10px;
        color: #aaa;
    }

        .detailSubGridCloseClass:hover {
            cursor: pointer;
            background-color: rgba(45, 93, 175, 0.35);
            color: white;
        }


    #user-search-bar .form-control {
        display: block;
        width: 100%;
        height: calc(1.5em + .45rem + 2px);
        padding: .0rem .25rem;
        font-size: 0.9rem;
        font-weight: 400;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: .25rem;
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    }



    #user-search-bar .dropdown-toggle {
        font-size: 0.9rem;
        height: calc(1.5em + 0.45rem + 2px);
        padding-top: 4px;
    }
</style>
}

<div id="header">
    <nav class="search-nav navbar-dark bg-dark-blue">
        <div id="search-wrapper" class="container-fluid">
            <div class="col-md-12 col-sm-12">
                <div class="form-row align-items-center">

                    <div id="user-search-bar" class="col-md-10 col-sm-12">
                        <div class="form-row">
                            <div class="col-md-3 col-sm-12">
                                <div class="form-row">
                                    <div class="form-group my-2 col-md-6 col-sm-12">
                                        <input id="prj-num-input" type="text" placeholder="Search Project Number..." class="form-control w-100" data-bind="textInput:projNumberSearchValue, event: {keypress: searchOnEnter}" />
                                    </div>
                                    <div class="form-group my-2 col-md-6 col-sm-12">
                                        <input type="text" placeholder="Search Project Name..." class="form-control w-100" data-bind="textInput:projNameSearchValue, event: {keypress: searchOnEnter}" />
                                    </div>
                                </div>
                            </div>
                            <select class="my-2 col-md-2 col-sm-12"
                                    data-style="btn-white shadow-sm"
                                    data-live-search="true"
                                    data-bind="selectPicker:true, options: customers, optionsText: 'customer_Name', optionsValue: 'customer_Name', value: customer, valueAllowUnset: true"
                                    data-none-selected-text="Search by Customer Name...">
                            </select>

                            <!-- ko if:endUsers().length > 10 -->
                            <select id="endUserPicker"
                                    class="my-2 col-md-2 col-sm-12"
                                    style="display:none"
                                    data-style="btn-white shadow-sm"
                                    data-live-search="true"
                                    data-size="10"
                                    data-bind="selectPicker:true, options: endUsers, optionsText: 'end_user_name', optionsValue: 'end_user_name', value: endUser, valueAllowUnset: true"
                                    data-none-selected-text="Search by End User Name...">
                            </select>
                            <!-- /ko -->
                            <!-- ko if:endUsers().length <= 10 -->
                            <select id="endUserPicker"
                                    class="my-2 col-md-2 col-sm-12"
                                    data-style="btn-white shadow-sm"
                                    data-bind="selectPicker:true, options: endUsers, optionsText: 'end_user_name', optionsValue: 'end_user_name', value: endUser, valueAllowUnset: true"
                                    data-none-selected-text="Search by End User Name...">
                            </select>
                            <!--/ko -->
                            <div class="col-md-5 col-sm-12">
                                <div class="form-row">
                                    <div class="form-group my-2 col-md-4 col-sm-12">
                                        <input type="text" placeholder="Search Invoice Number..." class="form-control w-100" data-bind="textInput:invoiceNo, event: {keypress: searchOnEnter}" />
                                    </div>

                                    <div class="form-group my-2 col-md-4 col-sm-12">
                                        <input type="text" placeholder="Search PO Number..." class="form-control w-100" data-bind="textInput:poNo, event: {keypress: searchOnEnter}" />
                                    </div>

                                    <div class="form-group my-2 col-md-4 col-sm-12">
                                        <input type="text" placeholder="Search HB Quote Number..." class="form-control w-100" data-bind="textInput:hbQuoteNo, event: {keypress: searchOnEnter}" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-2 col-sm-12">

                        <div class="form-row my-2">
                            <div class="col-6">
                                <button class="btn btn-primary col-12" data-bind="click:search">
                                    <i class="fas fa-search"></i> <span>Search</span>
                                </button>
                            </div>
                            <div class="col-6">
                                <button class="btn btn-green col-12" data-bind="click:clear">
                                    <span>Clear</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </nav>
</div>

<div id="content-wrap" style="width: 100%;">
    <div class="gridContent" id="searchTEG"></div>
</div>

<div id="detailSubGridModal" class="detailSubGridModalClass" style="display:none">
    <div id="detailSubGridCloseButton" class="detailSubGridCloseClass" data-bind="click:closeSubGrid">
        <i class="far fa-times-circle fa-3x"></i>
        <div class="mt-2">Close Details</div>
    </div>
    <div class="detailSubGridModalBodyClass">
        <div id="detailSubGrid" class="detailSubGridClass myGrid"></div>
    </div>
</div>

@model ServiceTRAX.Models.ViewModels.CommentsPageViewModel
@using ServiceTRAX.Identity

@{
    ViewData["Title"] = "Project Comments";
}

@section SubMenu {
    @await Component.InvokeAsync("SideMenu", new { OrganizationID = Model.OrganizationID, ProjectID = Model.ProjectID, RequestID = Model.RequestID })
}


@section Scripts {

    <script type='text/javascript' src='~/lib/knockout/knockout-latest.js'></script>
    <script type='text/javascript' src='~/lib/moment/moment.min.js'></script>
    <script type='text/javascript' src='~/js/ko-bindingHandlers.js'></script>
    <script type='text/javascript' src='~/override/main-custom.js'></script>

    <script>
        $(function () {

            var model =  @Html.Raw(Json.Serialize(Model));
            console.log(model);

            //
            // Comments support
            //
            model.newComment = {
                visibleToClient: ko.observable(false),
                commentText: ko.observable('')
            };
            model.newComment.toggleClientVisible = function () {
                this.newComment.visibleToClient(!this.newComment.visibleToClient());
            }.bind(model);

            model.requestComments = ko.observableArray([]);

            model.newComment.submitComment = function () {
                if (this.newComment.commentText().length > 0) {
                    fetch('api/v1/appendcomment',
                        {
                            method: 'POST',
                            body: JSON.stringify({
                                projectid: @Model.ProjectID,
                                comment: this.newComment.commentText(),
                                clientvisible: this.newComment.visibleToClient()
                            }),
                            headers: { 'Content-Type': 'application/json' }
                        }).then(res => res.json())
                        .catch(error => console.error('Error:', error))
                        .then(function (response) {
                            // Reload the comments
                            this.loadRequestComments(@Model.ProjectID, null);
                            // Clear comments box
                            this.newComment.commentText('');
                        }.bind(model));
                } else {
                    console.log('Trying to submit an empty comment.');
                }
            }.bind(model);

            model.loadRequestComments = function (projectid, requestid) {
                fetch(`api/v1/commentsbydate?ProjectID=${projectid}&RequestID=${requestid}`,
                    {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    }).then(res => res.json())
                    .catch(error => console.error('Error:', error))
                    .then(function (response) {
                        this.requestComments(response.value);
                        console.log(response.value);
                    }.bind(model));
            };

            model.removeComment = function (projectCommentID) {
                fetch(`api/v1/deletecomment?projectCommentID=${projectCommentID}`,
                    {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    }).then(res => res.json())
                    .catch(error => console.error('Error:', error))
                    .then(function (response) {
                        // Reload the comments
                        this.loadRequestComments(@Model.ProjectID, null);
                    }.bind(model));
            };


            model.urlToOriginalPost = function (projectID, requestID, quoteID) {
                if (requestID !== null) {
                    return `/QuoteRequest?RequestID=${requestID}&OrganizationID=@Model.OrganizationID`;
                } else if (quoteID !== null) {
                    return `/Quote?QuoteID=${quoteID}&OrganizationID=@Model.OrganizationID`;
                }

                return '';
            };

            model.isGeneralComment = function (requestID, quoteID) {
                return requestID === null && quoteID === null;
            };

            //
            // KO ApplyBindings
            ko.applyBindings(model);
            //
            //

            // Load the request comments after the all the KO bindings are complete
            model.loadRequestComments(@Model.ProjectID, null);
        });
    </script>
}


<script type="text/html" id="comment-template">
    <div class="comment card p-3 mb-3">
        <div class="row align-items-center">
            <div class="col-auto">
                <div class="avatar">
                    <img data-bind="attr: {src: '/UserPhotos/' + userPhoto  }" alt="Avatar">
                </div>
            </div>
            <div class="col">
                <div class="comment-poster d-inline-block mr-3"><strong data-bind="text: createdByName"></strong></div>
                <div class="time-posted d-inline-block mr-3" data-bind="text: moment(createTime).format('LT')"></div>
                <div class="btn btn-xs btn-orange" data-bind="visible: clientVisible"><em class="fas fa-eye"></em> Client</div>
                <div class="comment-body">
                    <div data-bind="if: $root.isGeneralComment(requestID, quoteID)"><small>General Project Comment</small></div>
                    <a data-bind="ifnot: requestID === null, attr: {href: $root.urlToOriginalPost(projectID, requestID, quoteID) }"><small>See Original Request</small></a>
                    <a data-bind="ifnot: quoteID === null, attr: {href: $root.urlToOriginalPost(projectID, requestID, quoteID) }"><small>See Original Quote</small></a>
                    <p data-bind="text: comment"></p>
                </div>
            </div>
            <div class="col-auto text-center">
                <div class="comment-delete" data-bind="if: createdBy===@User.GetUserID()">
                    <div class="btn icon-only" data-bind="click: function() { $root.removeComment(projectCommentID); }">
                        <em class="fas fa-trash"></em>
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>

<div id="content">
    <div class="container">
        <div class="row">
            <div class="col mb-4">
                <h2>Comments</h2>
                <div class="row">
                    <div class="col-3">
                        <span id="job-client" class="d-block"><strong>@Model.ProjectName</strong></span>
                        <span id="job-number" class="d-block">Job #@Model.ProjectNo</span>
                    </div>
                </div>

                <div data-bind="if: requestComments().length === 0">
                    <div class="my-4 text-muted">This Project does not have any comments yet...</div>
                </div>

                <div class="row mt-3">
                    <div class="col-12 col-sm-6">
                        <div class="day mb-3" data-bind="foreach: requestComments">
                            <div class="date-posted mb-1">Posted on: <strong data-bind="text: moment(date).format('ll')"></strong></div>
                            <div class="comment card p-3 mb-3" data-bind="foreach: comments" style="background-color: #f5f5f5">
                                <div data-bind="template: {name: 'comment-template'}"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mb-4">
                    <div class="col-12 col-sm-6 mb-3">
                        <div class="position-relative custom-textarea">
                            <textarea type="text"
                                      class="form-control"
                                      id="AddComment"
                                      placeholder="Add Comment..."
                                      rows="3"
                                      aria-describedby="VisibleClient" data-bind="textInput: newComment.commentText"></textarea>
                            <div class="d-block position-absolute custom-buttons">
                                <div class="btn btn-orange btn-sm mr-2" id="VisibleClientCommentBtn" style="display: none"
                                     title="This comment will be visible to project Client..."
                                     data-bind="visible: newComment.visibleToClient(), click: function() { newComment.toggleClientVisible(); }">
                                    <em class="fas fa-eye"></em> Visible to Client
                                </div>
                                <div class="btn btn-white btn-sm mr-2" id="NotVisibleClientCommentBtn" style="display: none"
                                     title="This comment will not be visible to project Client..."
                                     data-bind="hidden: newComment.visibleToClient(), click: function() { newComment.toggleClientVisible(); }">
                                    <em class="fas fa-eye-slash"></em> Not Visible to Client
                                </div>
                                <div class="btn btn-primary btn-sm"
                                     id="SubmitCommentBtn"
                                     data-bind="css: { 'btn-disabled': newComment.commentText().length === 0 }, click: function() { newComment.submitComment(); }">Submit</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
